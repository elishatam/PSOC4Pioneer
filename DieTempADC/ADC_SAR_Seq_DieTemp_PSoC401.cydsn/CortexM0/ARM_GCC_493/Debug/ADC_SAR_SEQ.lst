ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_SEQ.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_SEQ_initVar
  18              		.bss
  19              		.type	ADC_SAR_SEQ_initVar, %object
  20              		.size	ADC_SAR_SEQ_initVar, 1
  21              	ADC_SAR_SEQ_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_SEQ_offset,4,4
  24              		.comm	ADC_SAR_SEQ_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_SEQ_channelsConfig, %object
  28              		.size	ADC_SAR_SEQ_channelsConfig, 8
  29              	ADC_SAR_SEQ_channelsConfig:
  30 0000 02040000 		.word	1026
  31 0004 00040000 		.word	1024
  32              		.section	.text.ADC_SAR_SEQ_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_SAR_SEQ_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_SAR_SEQ_Start, %function
  38              	ADC_SAR_SEQ_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * File Name: ADC_SAR_SEQ.c
   3:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 2


  18:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #include "ADC_SAR_SEQ.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint8 ADC_SAR_SEQ_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int16 ADC_SAR_SEQ_offset[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int32 ADC_SAR_SEQ_countsPer10Volt[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];   /* Gain compensation 
  27:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** static const uint32 CYCODE ADC_SAR_SEQ_channelsConfig[] = { 0x00000402u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  to zero before call of ADC_SAR_SEQ_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Init() and ADC_SAR_SEQ_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(ADC_SAR_SEQ_initVar == 0u)
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_SAR_SEQ_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_SAR_SEQ_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_SAR_SEQ_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_SAR_SEQ_Start, .-ADC_SAR_SEQ_Start
  74              		.section	.text.ADC_SAR_SEQ_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_SAR_SEQ_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_SAR_SEQ_Init, %function
  80              	ADC_SAR_SEQ_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         static const uint8 CYCODE ADC_SAR_SEQ_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****              (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 5


 138:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         };
 168:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CyIntSetPriority(ADC_SAR_SEQ_INTC_NUMBER, ADC_SAR_SEQ_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0E20     		mov	r0, #14
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         (void)CyIntSetVector(ADC_SAR_SEQ_INTC_NUMBER, &ADC_SAR_SEQ_ISR);
  96              		.loc 1 173 0
  97 000e 754B     		ldr	r3, .L20
  98 0010 0E20     		mov	r0, #14
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif   /* End ADC_SAR_SEQ_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 176:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = ADC_SAR_SEQ_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 734B     		ldr	r3, .L20+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         (((ADC_SAR_SEQ_PUMP_CTRL_REG & ADC_SAR_SEQ_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 6


 106 001e 734B     		ldr	r3, .L20+8
 107 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 7249     		ldr	r1, .L20+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 7249     		ldr	r1, .L20+16
 117              	.L7:
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 724B     		ldr	r3, .L20+20
 120 002e 724A     		ldr	r2, .L20+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 714B     		ldr	r3, .L20+24
 126 0038 714A     		ldr	r2, .L20+28
 127 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG = ADC_SAR_SEQ_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 714B     		ldr	r3, .L20+32
 130 003e 724A     		ldr	r2, .L20+36
 131 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_COND_REG  = ADC_SAR_SEQ_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 724B     		ldr	r3, .L20+40
 134 0044 8022     		mov	r2, #128
 135 0046 D205     		lsl	r2, r2, #23
 136 0048 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME01_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME01_REG_CFG;
 137              		.loc 1 185 0 discriminator 4
 138 004a 714B     		ldr	r3, .L20+44
 139 004c 714A     		ldr	r2, .L20+48
 140 004e 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME23_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME23_REG_CFG;
 141              		.loc 1 186 0 discriminator 4
 142 0050 714B     		ldr	r3, .L20+52
 143 0052 704A     		ldr	r2, .L20+48
 144 0054 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 188:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_MUX_SWITCH0_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0;
 145              		.loc 1 190 0 discriminator 4
 146 0056 714B     		ldr	r3, .L20+56
 147 0058 704A     		ldr	r2, .L20+56
 148 005a 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 7


 149 005c 8021     		mov	r1, #128
 150 005e 4902     		lsl	r1, r1, #9
 151 0060 0A43     		orr	r2, r1
 152 0062 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0;
 153              		.loc 1 193 0 discriminator 4
 154 0064 6E4B     		ldr	r3, .L20+60
 155 0066 6E4A     		ldr	r2, .L20+60
 156 0068 1268     		ldr	r2, [r2]
 157 006a 8021     		mov	r1, #128
 158 006c 4902     		lsl	r1, r1, #9
 159 006e 0A43     		orr	r2, r1
 160 0070 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /*ADC_SAR_SEQ_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = 0u;
 161              		.loc 1 197 0 discriminator 4
 162 0072 6C4B     		ldr	r3, .L20+64
 163 0074 0022     		mov	r2, #0
 164 0076 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = 0u;
 165              		.loc 1 198 0 discriminator 4
 166 0078 6B4B     		ldr	r3, .L20+68
 167 007a 0022     		mov	r2, #0
 168 007c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_INTR_MASK_REG = ADC_SAR_SEQ_SAR_INTR_MASK;
 169              		.loc 1 199 0 discriminator 4
 170 007e 6B4B     		ldr	r3, .L20+72
 171 0080 1122     		mov	r2, #17
 172 0082 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 201:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_CY_SAR_IP_VER == ADC_SAR_SEQ_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_ANA_TRIM_REG = ADC_SAR_SEQ_TRIM_COEF;
 173              		.loc 1 202 0 discriminator 4
 174 0084 6A4B     		ldr	r3, .L20+76
 175 0086 0222     		mov	r2, #2
 176 0088 1A60     		str	r2, [r3]
 203:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* (ADC_SAR_SEQ_CY_SAR_IP_VER == ADC_SAR_SEQ_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 205:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     tmpRegVal = ADC_SAR_SEQ_SAR_DFT_CTRL_REG;
 177              		.loc 1 206 0 discriminator 4
 178 008a 6A4B     		ldr	r3, .L20+80
 179 008c 1B68     		ldr	r3, [r3]
 180 008e 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     tmpRegVal &= (uint32)~ADC_SAR_SEQ_DCEN;
 181              		.loc 1 207 0 discriminator 4
 182 0090 7B68     		ldr	r3, [r7, #4]
 183 0092 694A     		ldr	r2, .L20+84
 184 0094 1340     		and	r3, r2
 185 0096 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 209:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_CY_SAR_IP_VER == ADC_SAR_SEQ_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_NOMINAL_CLOCK_FREQ > (ADC_SAR_SEQ_MAX_FREQUENCY / 2))
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 8


 211:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_DLY_INC;
 186              		.loc 1 213 0 discriminator 4
 187 0098 7B68     		ldr	r3, [r7, #4]
 188 009a 0122     		mov	r2, #1
 189 009c 1343     		orr	r3, r2
 190 009e 7B60     		str	r3, [r7, #4]
 214:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else
 216:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if ((ADC_SAR_SEQ_DEFAULT_VREF_SEL == ADC_SAR_SEQ__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****              (ADC_SAR_SEQ_DEFAULT_VREF_SEL == ADC_SAR_SEQ__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #else
 220:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_DCEN;
 221:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal &= (uint32)~ADC_SAR_SEQ_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ((ADC_SAR_SEQ_DEFAULT_VREF_SEL == ADC_SAR_SEQ__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                    (ADC_SAR_SEQ_DEFAULT_VREF_SEL == ADC_SAR_SEQ__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* (ADC_SAR_SEQ_CY_SAR_IP_VER == ADC_SAR_SEQ_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 226:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_DFT_CTRL_REG = tmpRegVal;
 191              		.loc 1 226 0 discriminator 4
 192 00a0 644B     		ldr	r3, .L20+80
 193 00a2 7A68     		ldr	r2, [r7, #4]
 194 00a4 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 228:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_WOUNDING_REG = ADC_SAR_SEQ_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 232:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     for(chNum = 0u; chNum < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM; chNum++)
 195              		.loc 1 232 0 discriminator 4
 196 00a6 0023     		mov	r3, #0
 197 00a8 FB60     		str	r3, [r7, #12]
 198 00aa 94E0     		b	.L8
 199              	.L19:
 233:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 234:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal = (ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_CHANNEL_CONFIG_MASK);
 200              		.loc 1 234 0
 201 00ac 634B     		ldr	r3, .L20+88
 202 00ae FA68     		ldr	r2, [r7, #12]
 203 00b0 9200     		lsl	r2, r2, #2
 204 00b2 D258     		ldr	r2, [r2, r3]
 205 00b4 DC23     		mov	r3, #220
 206 00b6 9B01     		lsl	r3, r3, #6
 207 00b8 1340     		and	r3, r2
 208 00ba 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_InputsPlacement[chNum];
 209              		.loc 1 236 0
 210 00bc 604A     		ldr	r2, .L20+92
 211 00be FB68     		ldr	r3, [r7, #12]
 212 00c0 D318     		add	r3, r2, r3
 213 00c2 1B78     		ldrb	r3, [r3]
 214 00c4 1A1C     		mov	r2, r3
 215 00c6 7B68     		ldr	r3, [r7, #4]
 216 00c8 1343     		orr	r3, r2
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 9


 217 00ca 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         
 239:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         
 240:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         */
 244:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if((ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (ADC_SAR_SEQ_ALT_WOUNDING == ADC_SAR_SEQ_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal &= (uint32)(~ADC_SAR_SEQ_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 249:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(chNum < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 218              		.loc 1 250 0
 219 00cc FB68     		ldr	r3, [r7, #12]
 220 00ce 002B     		cmp	r3, #0
 221 00d0 29D1     		bne	.L9
 251:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegV
 222              		.loc 1 253 0
 223 00d2 FB68     		ldr	r3, [r7, #12]
 224 00d4 9B00     		lsl	r3, r3, #2
 225 00d6 5B4A     		ldr	r2, .L20+96
 226 00d8 9446     		mov	ip, r2
 227 00da 6344     		add	r3, r3, ip
 228 00dc 7A68     		ldr	r2, [r7, #4]
 229 00de 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 255:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 230              		.loc 1 255 0
 231 00e0 564B     		ldr	r3, .L20+88
 232 00e2 FA68     		ldr	r2, [r7, #12]
 233 00e4 9200     		lsl	r2, r2, #2
 234 00e6 D358     		ldr	r3, [r2, r3]
 235 00e8 0122     		mov	r2, #1
 236 00ea 1340     		and	r3, r2
 237 00ec 09D0     		beq	.L10
 256:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 257:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 238              		.loc 1 257 0
 239 00ee 4D4B     		ldr	r3, .L20+64
 240 00f0 4C4A     		ldr	r2, .L20+64
 241 00f2 1268     		ldr	r2, [r2]
 242 00f4 F968     		ldr	r1, [r7, #12]
 243 00f6 0120     		mov	r0, #1
 244 00f8 8840     		lsl	r0, r0, r1
 245 00fa 011C     		mov	r1, r0
 246 00fc 89B2     		uxth	r1, r1
 247 00fe 0A43     		orr	r2, r1
 248 0100 1A60     		str	r2, [r3]
 249              	.L10:
 258:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 259:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 260:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 10


 250              		.loc 1 260 0
 251 0102 4E4B     		ldr	r3, .L20+88
 252 0104 FA68     		ldr	r2, [r7, #12]
 253 0106 9200     		lsl	r2, r2, #2
 254 0108 D358     		ldr	r3, [r2, r3]
 255 010a 0222     		mov	r2, #2
 256 010c 1340     		and	r3, r2
 257 010e 2AD0     		beq	.L12
 261:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 262:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258              		.loc 1 262 0
 259 0110 454B     		ldr	r3, .L20+68
 260 0112 454A     		ldr	r2, .L20+68
 261 0114 1268     		ldr	r2, [r2]
 262 0116 F968     		ldr	r1, [r7, #12]
 263 0118 0120     		mov	r0, #1
 264 011a 8840     		lsl	r0, r0, r1
 265 011c 011C     		mov	r1, r0
 266 011e 89B2     		uxth	r1, r1
 267 0120 0A43     		orr	r2, r1
 268 0122 1A60     		str	r2, [r3]
 269 0124 1FE0     		b	.L12
 270              	.L9:
 263:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 264:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 265:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             else
 267:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 268:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 CY_SET_REG32(ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_SEQ_INJ_TAILG
 271              		.loc 1 268 0
 272 0126 484B     		ldr	r3, .L20+100
 273 0128 7A68     		ldr	r2, [r7, #4]
 274 012a 8021     		mov	r1, #128
 275 012c C905     		lsl	r1, r1, #23
 276 012e 0A43     		orr	r2, r1
 277 0130 1A60     		str	r2, [r3]
 269:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 270:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 278              		.loc 1 270 0
 279 0132 424B     		ldr	r3, .L20+88
 280 0134 FA68     		ldr	r2, [r7, #12]
 281 0136 9200     		lsl	r2, r2, #2
 282 0138 D358     		ldr	r3, [r2, r3]
 283 013a 0122     		mov	r2, #1
 284 013c 1340     		and	r3, r2
 285 013e 05D0     		beq	.L13
 271:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 272:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_SATURATE_MASK;
 286              		.loc 1 272 0
 287 0140 3A4B     		ldr	r3, .L20+72
 288 0142 3A4A     		ldr	r2, .L20+72
 289 0144 1268     		ldr	r2, [r2]
 290 0146 2021     		mov	r1, #32
 291 0148 0A43     		orr	r2, r1
 292 014a 1A60     		str	r2, [r3]
 293              	.L13:
 273:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 11


 274:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 275:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
 294              		.loc 1 275 0
 295 014c 3B4B     		ldr	r3, .L20+88
 296 014e FA68     		ldr	r2, [r7, #12]
 297 0150 9200     		lsl	r2, r2, #2
 298 0152 D358     		ldr	r3, [r2, r3]
 299 0154 0222     		mov	r2, #2
 300 0156 1340     		and	r3, r2
 301 0158 05D0     		beq	.L12
 276:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 277:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_RANGE_MASK;
 302              		.loc 1 277 0
 303 015a 344B     		ldr	r3, .L20+72
 304 015c 334A     		ldr	r2, .L20+72
 305 015e 1268     		ldr	r2, [r2]
 306 0160 4021     		mov	r1, #64
 307 0162 0A43     		orr	r2, r1
 308 0164 1A60     		str	r2, [r3]
 309              	.L12:
 278:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
 279:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 280:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 282:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_ALT_RESOLUTION_ON) != 0u)
 310              		.loc 1 282 0
 311 0166 354B     		ldr	r3, .L20+88
 312 0168 FA68     		ldr	r2, [r7, #12]
 313 016a 9200     		lsl	r2, r2, #2
 314 016c D258     		ldr	r2, [r2, r3]
 315 016e 8023     		mov	r3, #128
 316 0170 9B00     		lsl	r3, r3, #2
 317 0172 1340     		and	r3, r2
 318 0174 03D0     		beq	.L14
 283:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 284:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_DEFAULT_MAX_WRK_ALT;
 319              		.loc 1 284 0
 320 0176 8023     		mov	r3, #128
 321 0178 DB00     		lsl	r3, r3, #3
 322 017a BB60     		str	r3, [r7, #8]
 323 017c 02E0     		b	.L15
 324              	.L14:
 285:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 286:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else
 287:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 288:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_SAR_WRK_MAX_12BIT;
 325              		.loc 1 288 0
 326 017e 8023     		mov	r3, #128
 327 0180 5B01     		lsl	r3, r3, #5
 328 0182 BB60     		str	r3, [r7, #8]
 329              	.L15:
 289:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 290:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 291:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_DIFFERENTIAL_EN) == 0u)
 330              		.loc 1 291 0
 331 0184 2D4B     		ldr	r3, .L20+88
 332 0186 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 12


 333 0188 9200     		lsl	r2, r2, #2
 334 018a D258     		ldr	r2, [r2, r3]
 335 018c 8023     		mov	r3, #128
 336 018e 5B00     		lsl	r3, r3, #1
 337 0190 1340     		and	r3, r2
 338 0192 05D1     		bne	.L16
 292:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 293:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if((ADC_SAR_SEQ_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 (ADC_SAR_SEQ_DEFAULT_NEG_INPUT_SEL == ADC_SAR_SEQ__VREF))
 295:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else
 298:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 339              		.loc 1 298 0
 340 0194 2D4B     		ldr	r3, .L20+104
 341 0196 FA68     		ldr	r2, [r7, #12]
 342 0198 5200     		lsl	r2, r2, #1
 343 019a 0021     		mov	r1, #0
 344 019c D152     		strh	r1, [r2, r3]
 345 019e 04E0     		b	.L17
 346              	.L16:
 299:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 301:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 303:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else
 307:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 347              		.loc 1 307 0
 348 01a0 2A4B     		ldr	r3, .L20+104
 349 01a2 FA68     		ldr	r2, [r7, #12]
 350 01a4 5200     		lsl	r2, r2, #1
 351 01a6 0021     		mov	r1, #0
 352 01a8 D152     		strh	r1, [r2, r3]
 353              	.L17:
 308:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 310:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_SEQ_10MV_COUNTS) +
 354              		.loc 1 311 0 discriminator 2
 355 01aa BB68     		ldr	r3, [r7, #8]
 356 01ac 284A     		ldr	r2, .L20+108
 357 01ae 5343     		mul	r3, r2
 358 01b0 8022     		mov	r2, #128
 359 01b2 D200     		lsl	r2, r2, #3
 360 01b4 9446     		mov	ip, r2
 361 01b6 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                             ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE
 362              		.loc 1 312 0 discriminator 2
 363 01b8 002B     		cmp	r3, #0
 364 01ba 02DA     		bge	.L18
 365 01bc 254A     		ldr	r2, .L20+112
 366 01be 9446     		mov	ip, r2
 367 01c0 6344     		add	r3, r3, ip
 368              	.L18:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 13


 369 01c2 DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                             ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE
 370              		.loc 1 311 0 discriminator 2
 371 01c4 9BB2     		uxth	r3, r3
 372 01c6 19B2     		sxth	r1, r3
 373 01c8 234B     		ldr	r3, .L20+116
 374 01ca FA68     		ldr	r2, [r7, #12]
 375 01cc 9200     		lsl	r2, r2, #2
 376 01ce D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 377              		.loc 1 232 0 discriminator 2
 378 01d0 FB68     		ldr	r3, [r7, #12]
 379 01d2 0133     		add	r3, r3, #1
 380 01d4 FB60     		str	r3, [r7, #12]
 381              	.L8:
 232:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 382              		.loc 1 232 0 is_stmt 0 discriminator 1
 383 01d6 FB68     		ldr	r3, [r7, #12]
 384 01d8 012B     		cmp	r3, #1
 385 01da 00D8     		bhi	.LCB315
 386 01dc 66E7     		b	.L19	@long jump
 387              	.LCB315:
 313:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 314:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 388              		.loc 1 314 0 is_stmt 1
 389 01de BD46     		mov	sp, r7
 390 01e0 04B0     		add	sp, sp, #16
 391              		@ sp needed
 392 01e2 80BD     		pop	{r7, pc}
 393              	.L21:
 394              		.align	2
 395              	.L20:
 396 01e4 00000000 		.word	ADC_SAR_SEQ_ISR
 397 01e8 20001A40 		.word	1075445792
 398 01ec 80031A40 		.word	1075446656
 399 01f0 40201013 		.word	319823936
 400 01f4 40200013 		.word	318775360
 401 01f8 00001A40 		.word	1075445760
 402 01fc 04001A40 		.word	1075445764
 403 0200 CD000080 		.word	-2147483443
 404 0204 18001A40 		.word	1075445784
 405 0208 0000FF0F 		.word	268369920
 406 020c 1C001A40 		.word	1075445788
 407 0210 10001A40 		.word	1075445776
 408 0214 04000400 		.word	262148
 409 0218 14001A40 		.word	1075445780
 410 021c 00031A40 		.word	1075446528
 411 0220 40031A40 		.word	1075446592
 412 0224 28021A40 		.word	1075446312
 413 0228 38021A40 		.word	1075446328
 414 022c 18021A40 		.word	1075446296
 415 0230 000F1A40 		.word	1075449600
 416 0234 30001A40 		.word	1075445808
 417 0238 FFFFFFDF 		.word	-536870913
 418 023c 00000000 		.word	ADC_SAR_SEQ_channelsConfig
 419 0240 08000000 		.word	ADC_SAR_SEQ_InputsPlacement.4742
 420 0244 80001A40 		.word	1075445888
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 14


 421 0248 80021A40 		.word	1075446400
 422 024c 00000000 		.word	ADC_SAR_SEQ_offset
 423 0250 10270000 		.word	10000
 424 0254 FF070000 		.word	2047
 425 0258 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 426              		.cfi_endproc
 427              	.LFE1:
 428              		.size	ADC_SAR_SEQ_Init, .-ADC_SAR_SEQ_Init
 429              		.section	.text.ADC_SAR_SEQ_Enable,"ax",%progbits
 430              		.align	2
 431              		.global	ADC_SAR_SEQ_Enable
 432              		.code	16
 433              		.thumb_func
 434              		.type	ADC_SAR_SEQ_Enable, %function
 435              	ADC_SAR_SEQ_Enable:
 436              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 316:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 320:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Enable(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 437              		.loc 1 331 0
 438              		.cfi_startproc
 439 0000 80B5     		push	{r7, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if (0u == (ADC_SAR_SEQ_SAR_CTRL_REG & ADC_SAR_SEQ_ENABLE))
 445              		.loc 1 332 0
 446 0004 074B     		ldr	r3, .L24
 447 0006 1B68     		ldr	r3, [r3]
 448 0008 002B     		cmp	r3, #0
 449 000a 09DB     		blt	.L22
 333:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 334:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_CY_SAR_IP_VER != ADC_SAR_SEQ_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             while (0u != (ADC_SAR_SEQ_SAR_STATUS_REG & ADC_SAR_SEQ_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 338:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 340:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* (ADC_SAR_SEQ_CY_SAR_IP_VER != ADC_SAR_SEQ_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         
 342:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_ENABLE;
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 15


 450              		.loc 1 342 0
 451 000c 054B     		ldr	r3, .L24
 452 000e 054A     		ldr	r2, .L24
 453 0010 1268     		ldr	r2, [r2]
 454 0012 8021     		mov	r1, #128
 455 0014 0906     		lsl	r1, r1, #24
 456 0016 0A43     		orr	r2, r1
 457 0018 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         
 344:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CyDelayUs(ADC_SAR_SEQ_10US_DELAY);         
 458              		.loc 1 345 0
 459 001a 0A20     		mov	r0, #10
 460 001c FFF7FEFF 		bl	CyDelayUs
 461              	.L22:
 346:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 347:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 462              		.loc 1 347 0
 463 0020 BD46     		mov	sp, r7
 464              		@ sp needed
 465 0022 80BD     		pop	{r7, pc}
 466              	.L25:
 467              		.align	2
 468              	.L24:
 469 0024 00001A40 		.word	1075445760
 470              		.cfi_endproc
 471              	.LFE2:
 472              		.size	ADC_SAR_SEQ_Enable, .-ADC_SAR_SEQ_Enable
 473              		.section	.text.ADC_SAR_SEQ_Stop,"ax",%progbits
 474              		.align	2
 475              		.global	ADC_SAR_SEQ_Stop
 476              		.code	16
 477              		.thumb_func
 478              		.type	ADC_SAR_SEQ_Stop, %function
 479              	ADC_SAR_SEQ_Stop:
 480              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 349:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 350:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Stop
 352:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 354:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 358:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 361:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 364:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Stop(void)
 366:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 481              		.loc 1 366 0
 482              		.cfi_startproc
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 16


 483 0000 80B5     		push	{r7, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG &= (uint32)~ADC_SAR_SEQ_ENABLE;
 489              		.loc 1 367 0
 490 0004 034B     		ldr	r3, .L27
 491 0006 034A     		ldr	r2, .L27
 492 0008 1268     		ldr	r2, [r2]
 493 000a 5200     		lsl	r2, r2, #1
 494 000c 5208     		lsr	r2, r2, #1
 495 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 496              		.loc 1 368 0
 497 0010 BD46     		mov	sp, r7
 498              		@ sp needed
 499 0012 80BD     		pop	{r7, pc}
 500              	.L28:
 501              		.align	2
 502              	.L27:
 503 0014 00001A40 		.word	1075445760
 504              		.cfi_endproc
 505              	.LFE3:
 506              		.size	ADC_SAR_SEQ_Stop, .-ADC_SAR_SEQ_Stop
 507              		.section	.text.ADC_SAR_SEQ_StartConvert,"ax",%progbits
 508              		.align	2
 509              		.global	ADC_SAR_SEQ_StartConvert
 510              		.code	16
 511              		.thumb_func
 512              		.type	ADC_SAR_SEQ_StartConvert, %function
 513              	ADC_SAR_SEQ_StartConvert:
 514              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 370:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 371:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StartConvert
 373:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 375:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 387:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 390:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StartConvert(void)
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 17


 392:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 515              		.loc 1 392 0
 516              		.cfi_startproc
 517 0000 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG |= ADC_SAR_SEQ_CONTINUOUS_EN;
 523              		.loc 1 394 0
 524 0004 044B     		ldr	r3, .L30
 525 0006 044A     		ldr	r2, .L30
 526 0008 1268     		ldr	r2, [r2]
 527 000a 8021     		mov	r1, #128
 528 000c 4902     		lsl	r1, r1, #9
 529 000e 0A43     		orr	r2, r1
 530 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_START_CTRL_REG = ADC_SAR_SEQ_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 399:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 531              		.loc 1 399 0
 532 0012 BD46     		mov	sp, r7
 533              		@ sp needed
 534 0014 80BD     		pop	{r7, pc}
 535              	.L31:
 536 0016 C046     		.align	2
 537              	.L30:
 538 0018 04001A40 		.word	1075445764
 539              		.cfi_endproc
 540              	.LFE4:
 541              		.size	ADC_SAR_SEQ_StartConvert, .-ADC_SAR_SEQ_StartConvert
 542              		.section	.text.ADC_SAR_SEQ_StopConvert,"ax",%progbits
 543              		.align	2
 544              		.global	ADC_SAR_SEQ_StopConvert
 545              		.code	16
 546              		.thumb_func
 547              		.type	ADC_SAR_SEQ_StopConvert, %function
 548              	ADC_SAR_SEQ_StopConvert:
 549              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 401:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 402:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StopConvert
 404:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 406:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 409:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 412:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 18


 414:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 415:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 550              		.loc 1 417 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 00AF     		add	r7, sp, #0
 557              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_SEQ_CONTINUOUS_EN);
 558              		.loc 1 419 0
 559 0004 034B     		ldr	r3, .L33
 560 0006 034A     		ldr	r2, .L33
 561 0008 1268     		ldr	r2, [r2]
 562 000a 0349     		ldr	r1, .L33+4
 563 000c 0A40     		and	r2, r1
 564 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 565              		.loc 1 421 0
 566 0010 BD46     		mov	sp, r7
 567              		@ sp needed
 568 0012 80BD     		pop	{r7, pc}
 569              	.L34:
 570              		.align	2
 571              	.L33:
 572 0014 04001A40 		.word	1075445764
 573 0018 FFFFFEFF 		.word	-65537
 574              		.cfi_endproc
 575              	.LFE5:
 576              		.size	ADC_SAR_SEQ_StopConvert, .-ADC_SAR_SEQ_StopConvert
 577              		.section	.text.ADC_SAR_SEQ_IsEndConversion,"ax",%progbits
 578              		.align	2
 579              		.global	ADC_SAR_SEQ_IsEndConversion
 580              		.code	16
 581              		.thumb_func
 582              		.type	ADC_SAR_SEQ_IsEndConversion, %function
 583              	ADC_SAR_SEQ_IsEndConversion:
 584              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  completed.
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 19


 436:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 437:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 445:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 449:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint32 ADC_SAR_SEQ_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 585              		.loc 1 451 0
 586              		.cfi_startproc
 587 0000 80B5     		push	{r7, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 84B0     		sub	sp, sp, #16
 592              		.cfi_def_cfa_offset 24
 593 0004 00AF     		add	r7, sp, #0
 594              		.cfi_def_cfa_register 7
 595 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 status = 0u;
 596              		.loc 1 452 0
 597 0008 0023     		mov	r3, #0
 598 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if((retMode & (ADC_SAR_SEQ_RETURN_STATUS | ADC_SAR_SEQ_WAIT_FOR_RESULT)) != 0u)
 599              		.loc 1 454 0
 600 000c 7B68     		ldr	r3, [r7, #4]
 601 000e 0322     		mov	r2, #3
 602 0010 1340     		and	r3, r2
 603 0012 11D0     		beq	.L36
 604              	.L38:
 455:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 456:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         do
 457:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 458:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             status = ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_EOS_MASK;
 605              		.loc 1 458 0 discriminator 2
 606 0014 184B     		ldr	r3, .L43
 607 0016 1B68     		ldr	r3, [r3]
 608 0018 0122     		mov	r2, #1
 609 001a 1340     		and	r3, r2
 610 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }while((status == 0u) && ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT) != 0u));
 611              		.loc 1 459 0 discriminator 2
 612 001e FB68     		ldr	r3, [r7, #12]
 613 0020 002B     		cmp	r3, #0
 614 0022 03D1     		bne	.L37
 615              		.loc 1 459 0 is_stmt 0 discriminator 1
 616 0024 7B68     		ldr	r3, [r7, #4]
 617 0026 0222     		mov	r2, #2
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 20


 618 0028 1340     		and	r3, r2
 619 002a F3D1     		bne	.L38
 620              	.L37:
 460:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 461:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(status != 0u)
 621              		.loc 1 461 0 is_stmt 1
 622 002c FB68     		ldr	r3, [r7, #12]
 623 002e 002B     		cmp	r3, #0
 624 0030 02D0     		beq	.L36
 462:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 463:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_EOS_MASK;
 625              		.loc 1 464 0
 626 0032 114B     		ldr	r3, .L43
 627 0034 0122     		mov	r2, #1
 628 0036 1A60     		str	r2, [r3]
 629              	.L36:
 465:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 466:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 467:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 468:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((retMode & (ADC_SAR_SEQ_RETURN_STATUS_INJ | ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ)) != 0u)
 630              		.loc 1 469 0
 631 0038 7B68     		ldr	r3, [r7, #4]
 632 003a 0C22     		mov	r2, #12
 633 003c 1340     		and	r3, r2
 634 003e 15D0     		beq	.L39
 635              	.L41:
 470:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 471:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             do
 472:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 473:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 status |= ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_INJ_EOC_MASK;
 636              		.loc 1 473 0
 637 0040 0D4B     		ldr	r3, .L43
 638 0042 1B68     		ldr	r3, [r3]
 639 0044 1022     		mov	r2, #16
 640 0046 1340     		and	r3, r2
 641 0048 FA68     		ldr	r2, [r7, #12]
 642 004a 1343     		orr	r3, r2
 643 004c FB60     		str	r3, [r7, #12]
 474:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }while(((status & ADC_SAR_SEQ_INJ_EOC_MASK) == 0u) &&
 644              		.loc 1 474 0
 645 004e FB68     		ldr	r3, [r7, #12]
 646 0050 1022     		mov	r2, #16
 647 0052 1340     		and	r3, r2
 475:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                    ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ) != 0u));
 648              		.loc 1 475 0
 649 0054 03D1     		bne	.L40
 650              		.loc 1 475 0 is_stmt 0 discriminator 1
 651 0056 7B68     		ldr	r3, [r7, #4]
 652 0058 0822     		mov	r2, #8
 653 005a 1340     		and	r3, r2
 474:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }while(((status & ADC_SAR_SEQ_INJ_EOC_MASK) == 0u) &&
 654              		.loc 1 474 0 is_stmt 1 discriminator 1
 655 005c F0D1     		bne	.L41
 656              	.L40:
 476:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 21


 477:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((status & ADC_SAR_SEQ_INJ_EOC_MASK) != 0u)
 657              		.loc 1 477 0
 658 005e FB68     		ldr	r3, [r7, #12]
 659 0060 1022     		mov	r2, #16
 660 0062 1340     		and	r3, r2
 661 0064 02D0     		beq	.L39
 478:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 479:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_INJ_EOC_MASK;
 662              		.loc 1 480 0
 663 0066 044B     		ldr	r3, .L43
 664 0068 1022     		mov	r2, #16
 665 006a 1A60     		str	r2, [r3]
 666              	.L39:
 481:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 482:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 483:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 485:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return (status);
 667              		.loc 1 485 0
 668 006c FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 669              		.loc 1 486 0
 670 006e 181C     		mov	r0, r3
 671 0070 BD46     		mov	sp, r7
 672 0072 04B0     		add	sp, sp, #16
 673              		@ sp needed
 674 0074 80BD     		pop	{r7, pc}
 675              	.L44:
 676 0076 C046     		.align	2
 677              	.L43:
 678 0078 10021A40 		.word	1075446288
 679              		.cfi_endproc
 680              	.LFE6:
 681              		.size	ADC_SAR_SEQ_IsEndConversion, .-ADC_SAR_SEQ_IsEndConversion
 682              		.section	.text.ADC_SAR_SEQ_GetResult16,"ax",%progbits
 683              		.align	2
 684              		.global	ADC_SAR_SEQ_GetResult16
 685              		.code	16
 686              		.thumb_func
 687              		.type	ADC_SAR_SEQ_GetResult16, %function
 688              	ADC_SAR_SEQ_GetResult16:
 689              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 488:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_GetResult16
 491:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 493:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 496:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 500:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 22


 501:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 503:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** int16 ADC_SAR_SEQ_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 690              		.loc 1 505 0
 691              		.cfi_startproc
 692 0000 80B5     		push	{r7, lr}
 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 696 0002 84B0     		sub	sp, sp, #16
 697              		.cfi_def_cfa_offset 24
 698 0004 00AF     		add	r7, sp, #0
 699              		.cfi_def_cfa_register 7
 700 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 508:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 701              		.loc 1 509 0
 702 0008 7B68     		ldr	r3, [r7, #4]
 703 000a 012B     		cmp	r3, #1
 704 000c 02D9     		bls	.L46
 705              		.loc 1 509 0 is_stmt 0 discriminator 1
 706 000e 0020     		mov	r0, #0
 707 0010 FFF7FEFF 		bl	CyHalt
 708              	.L46:
 510:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(chan < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 709              		.loc 1 511 0 is_stmt 1
 710 0014 7B68     		ldr	r3, [r7, #4]
 711 0016 002B     		cmp	r3, #0
 712 0018 09D1     		bne	.L47
 512:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 513:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 713              		.loc 1 513 0
 714 001a 7B68     		ldr	r3, [r7, #4]
 715 001c 9B00     		lsl	r3, r3, #2
 716 001e 0A4A     		ldr	r2, .L50
 717 0020 9446     		mov	ip, r2
 718 0022 6344     		add	r3, r3, ip
 719 0024 1B68     		ldr	r3, [r3]
 720 0026 1B04     		lsl	r3, r3, #16
 721 0028 1B0C     		lsr	r3, r3, #16
 722 002a FB60     		str	r3, [r7, #12]
 723 002c 04E0     		b	.L48
 724              	.L47:
 514:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 516:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     else
 517:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 518:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = ADC_SAR_SEQ_SAR_INJ_RESULT_REG & ADC_SAR_SEQ_RESULT_MASK;
 725              		.loc 1 519 0
 726 002e 074B     		ldr	r3, .L50+4
 727 0030 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 23


 728 0032 1B04     		lsl	r3, r3, #16
 729 0034 1B0C     		lsr	r3, r3, #16
 730 0036 FB60     		str	r3, [r7, #12]
 731              	.L48:
 520:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #else
 521:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = 0u;
 522:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 524:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 525:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return ( (int16)result );
 732              		.loc 1 525 0
 733 0038 FB68     		ldr	r3, [r7, #12]
 734 003a 9BB2     		uxth	r3, r3
 735 003c 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 736              		.loc 1 526 0
 737 003e 181C     		mov	r0, r3
 738 0040 BD46     		mov	sp, r7
 739 0042 04B0     		add	sp, sp, #16
 740              		@ sp needed
 741 0044 80BD     		pop	{r7, pc}
 742              	.L51:
 743 0046 C046     		.align	2
 744              	.L50:
 745 0048 80011A40 		.word	1075446144
 746 004c 90021A40 		.word	1075446416
 747              		.cfi_endproc
 748              	.LFE7:
 749              		.size	ADC_SAR_SEQ_GetResult16, .-ADC_SAR_SEQ_GetResult16
 750              		.section	.text.ADC_SAR_SEQ_SetChanMask,"ax",%progbits
 751              		.align	2
 752              		.global	ADC_SAR_SEQ_SetChanMask
 753              		.code	16
 754              		.thumb_func
 755              		.type	ADC_SAR_SEQ_SetChanMask, %function
 756              	ADC_SAR_SEQ_SetChanMask:
 757              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 528:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 529:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetChanMask
 531:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 533:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 536:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 24


 547:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 758              		.loc 1 550 0
 759              		.cfi_startproc
 760 0000 80B5     		push	{r7, lr}
 761              		.cfi_def_cfa_offset 8
 762              		.cfi_offset 7, -8
 763              		.cfi_offset 14, -4
 764 0002 82B0     		sub	sp, sp, #8
 765              		.cfi_def_cfa_offset 16
 766 0004 00AF     		add	r7, sp, #0
 767              		.cfi_def_cfa_register 7
 768 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 769              		.loc 1 551 0
 770 0008 034B     		ldr	r3, .L53
 771 000a 7A68     		ldr	r2, [r7, #4]
 772 000c 0121     		mov	r1, #1
 773 000e 0A40     		and	r2, r1
 774 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 775              		.loc 1 552 0
 776 0012 BD46     		mov	sp, r7
 777 0014 02B0     		add	sp, sp, #8
 778              		@ sp needed
 779 0016 80BD     		pop	{r7, pc}
 780              	.L54:
 781              		.align	2
 782              	.L53:
 783 0018 20001A40 		.word	1075445792
 784              		.cfi_endproc
 785              	.LFE8:
 786              		.size	ADC_SAR_SEQ_SetChanMask, .-ADC_SAR_SEQ_SetChanMask
 787              		.section	.text.ADC_SAR_SEQ_EnableInjection,"ax",%progbits
 788              		.align	2
 789              		.global	ADC_SAR_SEQ_EnableInjection
 790              		.code	16
 791              		.thumb_func
 792              		.type	ADC_SAR_SEQ_EnableInjection, %function
 793              	ADC_SAR_SEQ_EnableInjection:
 794              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 554:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 557:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_EnableInjection
 559:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 561:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 564:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 25


 567:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 570:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     void ADC_SAR_SEQ_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 795              		.loc 1 572 0
 796              		.cfi_startproc
 797 0000 80B5     		push	{r7, lr}
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 573:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_SEQ_INJ_CHAN_EN;
 803              		.loc 1 573 0
 804 0004 044B     		ldr	r3, .L56
 805 0006 044A     		ldr	r2, .L56
 806 0008 1268     		ldr	r2, [r2]
 807 000a 8021     		mov	r1, #128
 808 000c 0906     		lsl	r1, r1, #24
 809 000e 0A43     		orr	r2, r1
 810 0010 1A60     		str	r2, [r3]
 574:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 811              		.loc 1 574 0
 812 0012 BD46     		mov	sp, r7
 813              		@ sp needed
 814 0014 80BD     		pop	{r7, pc}
 815              	.L57:
 816 0016 C046     		.align	2
 817              	.L56:
 818 0018 80021A40 		.word	1075446400
 819              		.cfi_endproc
 820              	.LFE9:
 821              		.size	ADC_SAR_SEQ_EnableInjection, .-ADC_SAR_SEQ_EnableInjection
 822              		.section	.text.ADC_SAR_SEQ_SetLowLimit,"ax",%progbits
 823              		.align	2
 824              		.global	ADC_SAR_SEQ_SetLowLimit
 825              		.code	16
 826              		.thumb_func
 827              		.type	ADC_SAR_SEQ_SetLowLimit, %function
 828              	ADC_SAR_SEQ_SetLowLimit:
 829              	.LFB10:
 575:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 576:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 26


 589:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 830              		.loc 1 594 0
 831              		.cfi_startproc
 832 0000 80B5     		push	{r7, lr}
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 82B0     		sub	sp, sp, #8
 837              		.cfi_def_cfa_offset 16
 838 0004 00AF     		add	r7, sp, #0
 839              		.cfi_def_cfa_register 7
 840 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_LOW_MASK);
 841              		.loc 1 595 0
 842 0008 084B     		ldr	r3, .L59
 843 000a 084A     		ldr	r2, .L59
 844 000c 1268     		ldr	r2, [r2]
 845 000e 120C     		lsr	r2, r2, #16
 846 0010 1204     		lsl	r2, r2, #16
 847 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_SEQ_RANGE_LOW_MASK;
 848              		.loc 1 596 0
 849 0014 054B     		ldr	r3, .L59
 850 0016 054A     		ldr	r2, .L59
 851 0018 1168     		ldr	r1, [r2]
 852 001a 7A68     		ldr	r2, [r7, #4]
 853 001c 1204     		lsl	r2, r2, #16
 854 001e 120C     		lsr	r2, r2, #16
 855 0020 0A43     		orr	r2, r1
 856 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 857              		.loc 1 597 0
 858 0024 BD46     		mov	sp, r7
 859 0026 02B0     		add	sp, sp, #8
 860              		@ sp needed
 861 0028 80BD     		pop	{r7, pc}
 862              	.L60:
 863 002a C046     		.align	2
 864              	.L59:
 865 002c 18001A40 		.word	1075445784
 866              		.cfi_endproc
 867              	.LFE10:
 868              		.size	ADC_SAR_SEQ_SetLowLimit, .-ADC_SAR_SEQ_SetLowLimit
 869              		.section	.text.ADC_SAR_SEQ_SetHighLimit,"ax",%progbits
 870              		.align	2
 871              		.global	ADC_SAR_SEQ_SetHighLimit
 872              		.code	16
 873              		.thumb_func
 874              		.type	ADC_SAR_SEQ_SetHighLimit, %function
 875              	ADC_SAR_SEQ_SetHighLimit:
 876              	.LFB11:
 598:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 27


 599:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 600:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 604:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 607:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 610:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 877              		.loc 1 615 0
 878              		.cfi_startproc
 879 0000 80B5     		push	{r7, lr}
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 82B0     		sub	sp, sp, #8
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 887 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_HIGH_MASK);
 888              		.loc 1 616 0
 889 0008 074B     		ldr	r3, .L62
 890 000a 074A     		ldr	r2, .L62
 891 000c 1268     		ldr	r2, [r2]
 892 000e 1204     		lsl	r2, r2, #16
 893 0010 120C     		lsr	r2, r2, #16
 894 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_SEQ_RANGE_HIGH_OFFSET);
 895              		.loc 1 617 0
 896 0014 044B     		ldr	r3, .L62
 897 0016 044A     		ldr	r2, .L62
 898 0018 1168     		ldr	r1, [r2]
 899 001a 7A68     		ldr	r2, [r7, #4]
 900 001c 1204     		lsl	r2, r2, #16
 901 001e 0A43     		orr	r2, r1
 902 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 903              		.loc 1 618 0
 904 0022 BD46     		mov	sp, r7
 905 0024 02B0     		add	sp, sp, #8
 906              		@ sp needed
 907 0026 80BD     		pop	{r7, pc}
 908              	.L63:
 909              		.align	2
 910              	.L62:
 911 0028 18001A40 		.word	1075445784
 912              		.cfi_endproc
 913              	.LFE11:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 28


 914              		.size	ADC_SAR_SEQ_SetHighLimit, .-ADC_SAR_SEQ_SetHighLimit
 915              		.section	.text.ADC_SAR_SEQ_SetLimitMask,"ax",%progbits
 916              		.align	2
 917              		.global	ADC_SAR_SEQ_SetLimitMask
 918              		.code	16
 919              		.thumb_func
 920              		.type	ADC_SAR_SEQ_SetLimitMask, %function
 921              	ADC_SAR_SEQ_SetLimitMask:
 922              	.LFB12:
 619:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 620:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 621:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 628:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 634:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 637:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 923              		.loc 1 639 0
 924              		.cfi_startproc
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 82B0     		sub	sp, sp, #8
 930              		.cfi_def_cfa_offset 16
 931 0004 00AF     		add	r7, sp, #0
 932              		.cfi_def_cfa_register 7
 933 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 934              		.loc 1 640 0
 935 0008 034B     		ldr	r3, .L65
 936 000a 7A68     		ldr	r2, [r7, #4]
 937 000c 0121     		mov	r1, #1
 938 000e 0A40     		and	r2, r1
 939 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 940              		.loc 1 641 0
 941 0012 BD46     		mov	sp, r7
 942 0014 02B0     		add	sp, sp, #8
 943              		@ sp needed
 944 0016 80BD     		pop	{r7, pc}
 945              	.L66:
 946              		.align	2
 947              	.L65:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 29


 948 0018 38021A40 		.word	1075446328
 949              		.cfi_endproc
 950              	.LFE12:
 951              		.size	ADC_SAR_SEQ_SetLimitMask, .-ADC_SAR_SEQ_SetLimitMask
 952              		.section	.text.ADC_SAR_SEQ_SetSatMask,"ax",%progbits
 953              		.align	2
 954              		.global	ADC_SAR_SEQ_SetSatMask
 955              		.code	16
 956              		.thumb_func
 957              		.type	ADC_SAR_SEQ_SetSatMask, %function
 958              	ADC_SAR_SEQ_SetSatMask:
 959              	.LFB13:
 642:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 643:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 644:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetSatMask
 646:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 648:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 651:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 657:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 660:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 960              		.loc 1 662 0
 961              		.cfi_startproc
 962 0000 80B5     		push	{r7, lr}
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 7, -8
 965              		.cfi_offset 14, -4
 966 0002 82B0     		sub	sp, sp, #8
 967              		.cfi_def_cfa_offset 16
 968 0004 00AF     		add	r7, sp, #0
 969              		.cfi_def_cfa_register 7
 970 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 971              		.loc 1 663 0
 972 0008 034B     		ldr	r3, .L68
 973 000a 7A68     		ldr	r2, [r7, #4]
 974 000c 0121     		mov	r1, #1
 975 000e 0A40     		and	r2, r1
 976 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 977              		.loc 1 664 0
 978 0012 BD46     		mov	sp, r7
 979 0014 02B0     		add	sp, sp, #8
 980              		@ sp needed
 981 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 30


 982              	.L69:
 983              		.align	2
 984              	.L68:
 985 0018 28021A40 		.word	1075446312
 986              		.cfi_endproc
 987              	.LFE13:
 988              		.size	ADC_SAR_SEQ_SetSatMask, .-ADC_SAR_SEQ_SetSatMask
 989              		.section	.text.ADC_SAR_SEQ_SetOffset,"ax",%progbits
 990              		.align	2
 991              		.global	ADC_SAR_SEQ_SetOffset
 992              		.code	16
 993              		.thumb_func
 994              		.type	ADC_SAR_SEQ_SetOffset, %function
 995              	ADC_SAR_SEQ_SetOffset:
 996              	.LFB14:
 665:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetOffset
 669:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 671:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 677:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 682:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 685:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 688:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 997              		.loc 1 690 0
 998              		.cfi_startproc
 999 0000 80B5     		push	{r7, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 82B0     		sub	sp, sp, #8
 1004              		.cfi_def_cfa_offset 16
 1005 0004 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 0006 7860     		str	r0, [r7, #4]
 1008 0008 0A1C     		mov	r2, r1
 1009 000a BB1C     		add	r3, r7, #2
 1010 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 31


 1011              		.loc 1 692 0
 1012 000e 7B68     		ldr	r3, [r7, #4]
 1013 0010 012B     		cmp	r3, #1
 1014 0012 02D9     		bls	.L71
 1015              		.loc 1 692 0 is_stmt 0 discriminator 1
 1016 0014 0020     		mov	r0, #0
 1017 0016 FFF7FEFF 		bl	CyHalt
 1018              	.L71:
 693:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 694:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_offset[chan] = offset;
 1019              		.loc 1 694 0 is_stmt 1
 1020 001a 044B     		ldr	r3, .L72
 1021 001c 7A68     		ldr	r2, [r7, #4]
 1022 001e 5200     		lsl	r2, r2, #1
 1023 0020 B91C     		add	r1, r7, #2
 1024 0022 0988     		ldrh	r1, [r1]
 1025 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 1026              		.loc 1 695 0
 1027 0026 BD46     		mov	sp, r7
 1028 0028 02B0     		add	sp, sp, #8
 1029              		@ sp needed
 1030 002a 80BD     		pop	{r7, pc}
 1031              	.L73:
 1032              		.align	2
 1033              	.L72:
 1034 002c 00000000 		.word	ADC_SAR_SEQ_offset
 1035              		.cfi_endproc
 1036              	.LFE14:
 1037              		.size	ADC_SAR_SEQ_SetOffset, .-ADC_SAR_SEQ_SetOffset
 1038              		.section	.text.ADC_SAR_SEQ_SetGain,"ax",%progbits
 1039              		.align	2
 1040              		.global	ADC_SAR_SEQ_SetGain
 1041              		.code	16
 1042              		.thumb_func
 1043              		.type	ADC_SAR_SEQ_SetGain, %function
 1044              	ADC_SAR_SEQ_SetGain:
 1045              	.LFB15:
 696:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetGain
 700:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 702:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 711:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 32


 715:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 718:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 722:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 1046              		.loc 1 724 0
 1047              		.cfi_startproc
 1048 0000 80B5     		push	{r7, lr}
 1049              		.cfi_def_cfa_offset 8
 1050              		.cfi_offset 7, -8
 1051              		.cfi_offset 14, -4
 1052 0002 82B0     		sub	sp, sp, #8
 1053              		.cfi_def_cfa_offset 16
 1054 0004 00AF     		add	r7, sp, #0
 1055              		.cfi_def_cfa_register 7
 1056 0006 7860     		str	r0, [r7, #4]
 1057 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1058              		.loc 1 726 0
 1059 000a 7B68     		ldr	r3, [r7, #4]
 1060 000c 012B     		cmp	r3, #1
 1061 000e 02D9     		bls	.L75
 1062              		.loc 1 726 0 is_stmt 0 discriminator 1
 1063 0010 0020     		mov	r0, #0
 1064 0012 FFF7FEFF 		bl	CyHalt
 1065              	.L75:
 727:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_countsPer10Volt[chan] = adcGain;
 1066              		.loc 1 728 0 is_stmt 1
 1067 0016 044B     		ldr	r3, .L76
 1068 0018 7A68     		ldr	r2, [r7, #4]
 1069 001a 9200     		lsl	r2, r2, #2
 1070 001c 3968     		ldr	r1, [r7]
 1071 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 1072              		.loc 1 729 0
 1073 0020 BD46     		mov	sp, r7
 1074 0022 02B0     		add	sp, sp, #8
 1075              		@ sp needed
 1076 0024 80BD     		pop	{r7, pc}
 1077              	.L77:
 1078 0026 C046     		.align	2
 1079              	.L76:
 1080 0028 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1081              		.cfi_endproc
 1082              	.LFE15:
 1083              		.size	ADC_SAR_SEQ_SetGain, .-ADC_SAR_SEQ_SetGain
 1084              		.global	__aeabi_idiv
 1085              		.section	.text.ADC_SAR_SEQ_CountsTo_mVolts,"ax",%progbits
 1086              		.align	2
 1087              		.global	ADC_SAR_SEQ_CountsTo_mVolts
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 33


 1088              		.code	16
 1089              		.thumb_func
 1090              		.type	ADC_SAR_SEQ_CountsTo_mVolts, %function
 1091              	ADC_SAR_SEQ_CountsTo_mVolts:
 1092              	.LFB16:
 730:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 731:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 732:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_SEQ__RIGHT)
 733:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 734:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 735:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 739:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 743:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 747:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 750:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int16 ADC_SAR_SEQ_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1093              		.loc 1 757 0
 1094              		.cfi_startproc
 1095 0000 80B5     		push	{r7, lr}
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 7, -8
 1098              		.cfi_offset 14, -4
 1099 0002 84B0     		sub	sp, sp, #16
 1100              		.cfi_def_cfa_offset 24
 1101 0004 00AF     		add	r7, sp, #0
 1102              		.cfi_def_cfa_register 7
 1103 0006 7860     		str	r0, [r7, #4]
 1104 0008 0A1C     		mov	r2, r1
 1105 000a BB1C     		add	r3, r7, #2
 1106 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1107              		.loc 1 761 0
 1108 000e 7B68     		ldr	r3, [r7, #4]
 1109 0010 012B     		cmp	r3, #1
 1110 0012 02D9     		bls	.L79
 1111              		.loc 1 761 0 is_stmt 0 discriminator 1
 1112 0014 0020     		mov	r0, #0
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 34


 1113 0016 FFF7FEFF 		bl	CyHalt
 1114              	.L79:
 762:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 767:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 769:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 771:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1115              		.loc 1 772 0 is_stmt 1
 1116 001a 1F4B     		ldr	r3, .L85
 1117 001c 7A68     		ldr	r2, [r7, #4]
 1118 001e 5200     		lsl	r2, r2, #1
 1119 0020 D35A     		ldrh	r3, [r2, r3]
 1120 0022 99B2     		uxth	r1, r3
 1121 0024 BB1C     		add	r3, r7, #2
 1122 0026 1A88     		ldrh	r2, [r3]
 1123 0028 8BB2     		uxth	r3, r1
 1124 002a D31A     		sub	r3, r2, r3
 1125 002c 9AB2     		uxth	r2, r3
 1126 002e BB1C     		add	r3, r7, #2
 1127 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 774:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_SEQ_10MV_COUNTS) + ( (adcCounts > 0) ?
 1128              		.loc 1 774 0
 1129 0032 BB1C     		add	r3, r7, #2
 1130 0034 0022     		mov	r2, #0
 1131 0036 9B5E     		ldrsh	r3, [r3, r2]
 1132 0038 184A     		ldr	r2, .L85+4
 1133 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 1134              		.loc 1 775 0
 1135 003c BB1C     		add	r3, r7, #2
 1136 003e 0021     		mov	r1, #0
 1137 0040 5B5E     		ldrsh	r3, [r3, r1]
 1138 0042 002B     		cmp	r3, #0
 1139 0044 08DD     		ble	.L80
 1140              		.loc 1 775 0 is_stmt 0 discriminator 1
 1141 0046 164B     		ldr	r3, .L85+8
 1142 0048 7968     		ldr	r1, [r7, #4]
 1143 004a 8900     		lsl	r1, r1, #2
 1144 004c CB58     		ldr	r3, [r1, r3]
 1145 004e 002B     		cmp	r3, #0
 1146 0050 00DA     		bge	.L81
 1147 0052 0133     		add	r3, r3, #1
 1148              	.L81:
 1149 0054 5B10     		asr	r3, r3, #1
 1150 0056 08E0     		b	.L82
 1151              	.L80:
 1152              		.loc 1 775 0 discriminator 2
 1153 0058 114B     		ldr	r3, .L85+8
 1154 005a 7968     		ldr	r1, [r7, #4]
 1155 005c 8900     		lsl	r1, r1, #2
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 35


 1156 005e CB58     		ldr	r3, [r1, r3]
 1157 0060 002B     		cmp	r3, #0
 1158 0062 00DA     		bge	.L83
 1159 0064 0133     		add	r3, r3, #1
 1160              	.L83:
 1161 0066 5B10     		asr	r3, r3, #1
 1162 0068 5B42     		neg	r3, r3
 1163              	.L82:
 774:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 1164              		.loc 1 774 0 is_stmt 1
 1165 006a D118     		add	r1, r2, r3
 776:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  / ADC_SAR_SEQ_countsPer10Volt[chan]);
 1166              		.loc 1 776 0
 1167 006c 0C4B     		ldr	r3, .L85+8
 1168 006e 7A68     		ldr	r2, [r7, #4]
 1169 0070 9200     		lsl	r2, r2, #2
 1170 0072 D358     		ldr	r3, [r2, r3]
 1171 0074 081C     		mov	r0, r1
 1172 0076 191C     		mov	r1, r3
 1173 0078 FFF7FEFF 		bl	__aeabi_idiv
 1174 007c 031C     		mov	r3, r0
 1175 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 1176              		.loc 1 774 0
 1177 0080 0E23     		mov	r3, #14
 1178 0082 FB18     		add	r3, r7, r3
 1179 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 778:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( mVolts );
 1180              		.loc 1 778 0
 1181 0086 0E23     		mov	r3, #14
 1182 0088 FB18     		add	r3, r7, r3
 1183 008a 1B88     		ldrh	r3, [r3]
 1184 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1185              		.loc 1 779 0
 1186 008e 181C     		mov	r0, r3
 1187 0090 BD46     		mov	sp, r7
 1188 0092 04B0     		add	sp, sp, #16
 1189              		@ sp needed
 1190 0094 80BD     		pop	{r7, pc}
 1191              	.L86:
 1192 0096 C046     		.align	2
 1193              	.L85:
 1194 0098 00000000 		.word	ADC_SAR_SEQ_offset
 1195 009c 10270000 		.word	10000
 1196 00a0 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1197              		.cfi_endproc
 1198              	.LFE16:
 1199              		.size	ADC_SAR_SEQ_CountsTo_mVolts, .-ADC_SAR_SEQ_CountsTo_mVolts
 1200              		.global	__aeabi_lmul
 1201              		.global	__aeabi_ldivmod
 1202              		.section	.text.ADC_SAR_SEQ_CountsTo_uVolts,"ax",%progbits
 1203              		.align	2
 1204              		.global	ADC_SAR_SEQ_CountsTo_uVolts
 1205              		.code	16
 1206              		.thumb_func
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 36


 1207              		.type	ADC_SAR_SEQ_CountsTo_uVolts, %function
 1208              	ADC_SAR_SEQ_CountsTo_uVolts:
 1209              	.LFB17:
 780:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 781:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 786:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 790:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 794:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 797:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 802:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 809:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 ADC_SAR_SEQ_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1210              		.loc 1 811 0
 1211              		.cfi_startproc
 1212 0000 B0B5     		push	{r4, r5, r7, lr}
 1213              		.cfi_def_cfa_offset 16
 1214              		.cfi_offset 4, -16
 1215              		.cfi_offset 5, -12
 1216              		.cfi_offset 7, -8
 1217              		.cfi_offset 14, -4
 1218 0002 86B0     		sub	sp, sp, #24
 1219              		.cfi_def_cfa_offset 40
 1220 0004 00AF     		add	r7, sp, #0
 1221              		.cfi_def_cfa_register 7
 1222 0006 F860     		str	r0, [r7, #12]
 1223 0008 0A1C     		mov	r2, r1
 1224 000a 0A23     		mov	r3, #10
 1225 000c FB18     		add	r3, r7, r3
 1226 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 814:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1227              		.loc 1 815 0
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 37


 1228 0010 FB68     		ldr	r3, [r7, #12]
 1229 0012 012B     		cmp	r3, #1
 1230 0014 02D9     		bls	.L88
 1231              		.loc 1 815 0 is_stmt 0 discriminator 1
 1232 0016 0020     		mov	r0, #0
 1233 0018 FFF7FEFF 		bl	CyHalt
 1234              	.L88:
 816:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 817:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 821:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 823:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 825:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1235              		.loc 1 826 0 is_stmt 1
 1236 001c 194B     		ldr	r3, .L90
 1237 001e FA68     		ldr	r2, [r7, #12]
 1238 0020 5200     		lsl	r2, r2, #1
 1239 0022 D35A     		ldrh	r3, [r2, r3]
 1240 0024 99B2     		uxth	r1, r3
 1241 0026 0A23     		mov	r3, #10
 1242 0028 FB18     		add	r3, r7, r3
 1243 002a 1A88     		ldrh	r2, [r3]
 1244 002c 8BB2     		uxth	r3, r1
 1245 002e D31A     		sub	r3, r2, r3
 1246 0030 9AB2     		uxth	r2, r3
 1247 0032 0A23     		mov	r3, #10
 1248 0034 FB18     		add	r3, r7, r3
 1249 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 828:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         uVolts = ((int64)adcCounts * ADC_SAR_SEQ_10UV_COUNTS) / ADC_SAR_SEQ_countsPer10Volt[chan];
 1250              		.loc 1 828 0
 1251 0038 0A23     		mov	r3, #10
 1252 003a FB18     		add	r3, r7, r3
 1253 003c 1B88     		ldrh	r3, [r3]
 1254 003e 1BB2     		sxth	r3, r3
 1255 0040 3B60     		str	r3, [r7]
 1256 0042 DB17     		asr	r3, r3, #31
 1257 0044 7B60     		str	r3, [r7, #4]
 1258 0046 3868     		ldr	r0, [r7]
 1259 0048 7968     		ldr	r1, [r7, #4]
 1260 004a 0F4A     		ldr	r2, .L90+4
 1261 004c 0023     		mov	r3, #0
 1262 004e FFF7FEFF 		bl	__aeabi_lmul
 1263 0052 021C     		mov	r2, r0
 1264 0054 0B1C     		mov	r3, r1
 1265 0056 101C     		mov	r0, r2
 1266 0058 191C     		mov	r1, r3
 1267 005a 0C4B     		ldr	r3, .L90+8
 1268 005c FA68     		ldr	r2, [r7, #12]
 1269 005e 9200     		lsl	r2, r2, #2
 1270 0060 D358     		ldr	r3, [r2, r3]
 1271 0062 1C1C     		mov	r4, r3
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 38


 1272 0064 DB17     		asr	r3, r3, #31
 1273 0066 1D1C     		mov	r5, r3
 1274 0068 221C     		mov	r2, r4
 1275 006a 2B1C     		mov	r3, r5
 1276 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1277 0070 031C     		mov	r3, r0
 1278 0072 0C1C     		mov	r4, r1
 1279 0074 3B61     		str	r3, [r7, #16]
 1280 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 830:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( (int32)uVolts );
 1281              		.loc 1 830 0
 1282 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1283              		.loc 1 831 0
 1284 007a 181C     		mov	r0, r3
 1285 007c BD46     		mov	sp, r7
 1286 007e 06B0     		add	sp, sp, #24
 1287              		@ sp needed
 1288 0080 B0BD     		pop	{r4, r5, r7, pc}
 1289              	.L91:
 1290 0082 C046     		.align	2
 1291              	.L90:
 1292 0084 00000000 		.word	ADC_SAR_SEQ_offset
 1293 0088 80969800 		.word	10000000
 1294 008c 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1295              		.cfi_endproc
 1296              	.LFE17:
 1297              		.size	ADC_SAR_SEQ_CountsTo_uVolts, .-ADC_SAR_SEQ_CountsTo_uVolts
 1298              		.global	__aeabi_i2f
 1299              		.global	__aeabi_fmul
 1300              		.global	__aeabi_fdiv
 1301              		.section	.text.ADC_SAR_SEQ_CountsTo_Volts,"ax",%progbits
 1302              		.align	2
 1303              		.global	ADC_SAR_SEQ_CountsTo_Volts
 1304              		.code	16
 1305              		.thumb_func
 1306              		.type	ADC_SAR_SEQ_CountsTo_Volts, %function
 1307              	ADC_SAR_SEQ_CountsTo_Volts:
 1308              	.LFB18:
 832:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 833:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 834:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 838:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 842:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 846:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 39


 849:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 854:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     float32 ADC_SAR_SEQ_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1309              		.loc 1 856 0
 1310              		.cfi_startproc
 1311 0000 90B5     		push	{r4, r7, lr}
 1312              		.cfi_def_cfa_offset 12
 1313              		.cfi_offset 4, -12
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 85B0     		sub	sp, sp, #20
 1317              		.cfi_def_cfa_offset 32
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 1320 0006 7860     		str	r0, [r7, #4]
 1321 0008 0A1C     		mov	r2, r1
 1322 000a BB1C     		add	r3, r7, #2
 1323 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 859:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1324              		.loc 1 860 0
 1325 000e 7B68     		ldr	r3, [r7, #4]
 1326 0010 012B     		cmp	r3, #1
 1327 0012 02D9     		bls	.L93
 1328              		.loc 1 860 0 is_stmt 0 discriminator 1
 1329 0014 0020     		mov	r0, #0
 1330 0016 FFF7FEFF 		bl	CyHalt
 1331              	.L93:
 861:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 862:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 866:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 868:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 870:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1332              		.loc 1 871 0 is_stmt 1
 1333 001a 164B     		ldr	r3, .L95
 1334 001c 7A68     		ldr	r2, [r7, #4]
 1335 001e 5200     		lsl	r2, r2, #1
 1336 0020 D35A     		ldrh	r3, [r2, r3]
 1337 0022 99B2     		uxth	r1, r3
 1338 0024 BB1C     		add	r3, r7, #2
 1339 0026 1A88     		ldrh	r2, [r3]
 1340 0028 8BB2     		uxth	r3, r1
 1341 002a D31A     		sub	r3, r2, r3
 1342 002c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 40


 1343 002e BB1C     		add	r3, r7, #2
 1344 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 873:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         volts = ((float32)adcCounts * ADC_SAR_SEQ_10V_COUNTS) / (float32)ADC_SAR_SEQ_countsPer10Vol
 1345              		.loc 1 873 0
 1346 0032 BB1C     		add	r3, r7, #2
 1347 0034 0022     		mov	r2, #0
 1348 0036 9B5E     		ldrsh	r3, [r3, r2]
 1349 0038 181C     		mov	r0, r3
 1350 003a FFF7FEFF 		bl	__aeabi_i2f
 1351 003e 031C     		add	r3, r0, #0
 1352 0040 181C     		add	r0, r3, #0
 1353 0042 0D49     		ldr	r1, .L95+4
 1354 0044 FFF7FEFF 		bl	__aeabi_fmul
 1355 0048 031C     		add	r3, r0, #0
 1356 004a 1C1C     		add	r4, r3, #0
 1357 004c 0B4B     		ldr	r3, .L95+8
 1358 004e 7A68     		ldr	r2, [r7, #4]
 1359 0050 9200     		lsl	r2, r2, #2
 1360 0052 D358     		ldr	r3, [r2, r3]
 1361 0054 181C     		mov	r0, r3
 1362 0056 FFF7FEFF 		bl	__aeabi_i2f
 1363 005a 031C     		add	r3, r0, #0
 1364 005c 201C     		add	r0, r4, #0
 1365 005e 191C     		add	r1, r3, #0
 1366 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1367 0064 031C     		add	r3, r0, #0
 1368 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 875:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( volts );
 1369              		.loc 1 875 0
 1370 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1371              		.loc 1 876 0
 1372 006a 181C     		add	r0, r3, #0
 1373 006c BD46     		mov	sp, r7
 1374 006e 05B0     		add	sp, sp, #20
 1375              		@ sp needed
 1376 0070 90BD     		pop	{r4, r7, pc}
 1377              	.L96:
 1378 0072 C046     		.align	2
 1379              	.L95:
 1380 0074 00000000 		.word	ADC_SAR_SEQ_offset
 1381 0078 00002041 		.word	1092616192
 1382 007c 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1383              		.cfi_endproc
 1384              	.LFE18:
 1385              		.size	ADC_SAR_SEQ_CountsTo_Volts, .-ADC_SAR_SEQ_CountsTo_Volts
 1386              		.section	.rodata
 1387              		.align	2
 1388              		.type	ADC_SAR_SEQ_InputsPlacement.4742, %object
 1389              		.size	ADC_SAR_SEQ_InputsPlacement.4742, 2
 1390              	ADC_SAR_SEQ_InputsPlacement.4742:
 1391 0008 73       		.byte	115
 1392 0009 70       		.byte	112
 1393 000a 0000     		.text
 1394              	.Letext0:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 41


 1395              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1396              		.section	.debug_info,"",%progbits
 1397              	.Ldebug_info0:
 1398 0000 A8040000 		.4byte	0x4a8
 1399 0004 0400     		.2byte	0x4
 1400 0006 00000000 		.4byte	.Ldebug_abbrev0
 1401 000a 04       		.byte	0x4
 1402 000b 01       		.uleb128 0x1
 1403 000c CB030000 		.4byte	.LASF61
 1404 0010 01       		.byte	0x1
 1405 0011 6A000000 		.4byte	.LASF62
 1406 0015 D2010000 		.4byte	.LASF63
 1407 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1408 001d 00000000 		.4byte	0
 1409 0021 00000000 		.4byte	.Ldebug_line0
 1410 0025 02       		.uleb128 0x2
 1411 0026 01       		.byte	0x1
 1412 0027 06       		.byte	0x6
 1413 0028 E1000000 		.4byte	.LASF0
 1414 002c 02       		.uleb128 0x2
 1415 002d 01       		.byte	0x1
 1416 002e 08       		.byte	0x8
 1417 002f B1020000 		.4byte	.LASF1
 1418 0033 02       		.uleb128 0x2
 1419 0034 02       		.byte	0x2
 1420 0035 05       		.byte	0x5
 1421 0036 DB020000 		.4byte	.LASF2
 1422 003a 02       		.uleb128 0x2
 1423 003b 02       		.byte	0x2
 1424 003c 07       		.byte	0x7
 1425 003d A3010000 		.4byte	.LASF3
 1426 0041 02       		.uleb128 0x2
 1427 0042 04       		.byte	0x4
 1428 0043 05       		.byte	0x5
 1429 0044 F3000000 		.4byte	.LASF4
 1430 0048 02       		.uleb128 0x2
 1431 0049 04       		.byte	0x4
 1432 004a 07       		.byte	0x7
 1433 004b 81010000 		.4byte	.LASF5
 1434 004f 02       		.uleb128 0x2
 1435 0050 08       		.byte	0x8
 1436 0051 05       		.byte	0x5
 1437 0052 D3000000 		.4byte	.LASF6
 1438 0056 02       		.uleb128 0x2
 1439 0057 08       		.byte	0x8
 1440 0058 07       		.byte	0x7
 1441 0059 91000000 		.4byte	.LASF7
 1442 005d 03       		.uleb128 0x3
 1443 005e 04       		.byte	0x4
 1444 005f 05       		.byte	0x5
 1445 0060 696E7400 		.ascii	"int\000"
 1446 0064 02       		.uleb128 0x2
 1447 0065 04       		.byte	0x4
 1448 0066 07       		.byte	0x7
 1449 0067 51010000 		.4byte	.LASF8
 1450 006b 04       		.uleb128 0x4
 1451 006c FC000000 		.4byte	.LASF9
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 42


 1452 0070 02       		.byte	0x2
 1453 0071 C2       		.byte	0xc2
 1454 0072 2C000000 		.4byte	0x2c
 1455 0076 04       		.uleb128 0x4
 1456 0077 18000000 		.4byte	.LASF10
 1457 007b 02       		.byte	0x2
 1458 007c C3       		.byte	0xc3
 1459 007d 3A000000 		.4byte	0x3a
 1460 0081 04       		.uleb128 0x4
 1461 0082 3D010000 		.4byte	.LASF11
 1462 0086 02       		.byte	0x2
 1463 0087 C4       		.byte	0xc4
 1464 0088 48000000 		.4byte	0x48
 1465 008c 04       		.uleb128 0x4
 1466 008d C5030000 		.4byte	.LASF12
 1467 0091 02       		.byte	0x2
 1468 0092 C6       		.byte	0xc6
 1469 0093 33000000 		.4byte	0x33
 1470 0097 04       		.uleb128 0x4
 1471 0098 ED000000 		.4byte	.LASF13
 1472 009c 02       		.byte	0x2
 1473 009d C7       		.byte	0xc7
 1474 009e 41000000 		.4byte	0x41
 1475 00a2 04       		.uleb128 0x4
 1476 00a3 2D020000 		.4byte	.LASF14
 1477 00a7 02       		.byte	0x2
 1478 00a8 C8       		.byte	0xc8
 1479 00a9 AD000000 		.4byte	0xad
 1480 00ad 02       		.uleb128 0x2
 1481 00ae 04       		.byte	0x4
 1482 00af 04       		.byte	0x4
 1483 00b0 88020000 		.4byte	.LASF15
 1484 00b4 02       		.uleb128 0x2
 1485 00b5 08       		.byte	0x8
 1486 00b6 04       		.byte	0x4
 1487 00b7 1A010000 		.4byte	.LASF16
 1488 00bb 04       		.uleb128 0x4
 1489 00bc 5E020000 		.4byte	.LASF17
 1490 00c0 02       		.byte	0x2
 1491 00c1 CD       		.byte	0xcd
 1492 00c2 4F000000 		.4byte	0x4f
 1493 00c6 02       		.uleb128 0x2
 1494 00c7 01       		.byte	0x1
 1495 00c8 08       		.byte	0x8
 1496 00c9 77030000 		.4byte	.LASF18
 1497 00cd 05       		.uleb128 0x5
 1498 00ce 27020000 		.4byte	.LASF19
 1499 00d2 02       		.byte	0x2
 1500 00d3 6E01     		.2byte	0x16e
 1501 00d5 D9000000 		.4byte	0xd9
 1502 00d9 06       		.uleb128 0x6
 1503 00da 81000000 		.4byte	0x81
 1504 00de 02       		.uleb128 0x2
 1505 00df 04       		.byte	0x4
 1506 00e0 07       		.byte	0x7
 1507 00e1 35020000 		.4byte	.LASF20
 1508 00e5 07       		.uleb128 0x7
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 43


 1509 00e6 58000000 		.4byte	.LASF25
 1510 00ea 01       		.byte	0x1
 1511 00eb 3F       		.byte	0x3f
 1512 00ec 00000000 		.4byte	.LFB0
 1513 00f0 24000000 		.4byte	.LFE0-.LFB0
 1514 00f4 01       		.uleb128 0x1
 1515 00f5 9C       		.byte	0x9c
 1516 00f6 08       		.uleb128 0x8
 1517 00f7 59040000 		.4byte	.LASF36
 1518 00fb 01       		.byte	0x1
 1519 00fc 5E       		.byte	0x5e
 1520 00fd 00000000 		.4byte	.LFB1
 1521 0101 5C020000 		.4byte	.LFE1-.LFB1
 1522 0105 01       		.uleb128 0x1
 1523 0106 9C       		.byte	0x9c
 1524 0107 47010000 		.4byte	0x147
 1525 010b 09       		.uleb128 0x9
 1526 010c 3D030000 		.4byte	.LASF21
 1527 0110 01       		.byte	0x1
 1528 0111 60       		.byte	0x60
 1529 0112 81000000 		.4byte	0x81
 1530 0116 02       		.uleb128 0x2
 1531 0117 91       		.byte	0x91
 1532 0118 74       		.sleb128 -12
 1533 0119 09       		.uleb128 0x9
 1534 011a 99010000 		.4byte	.LASF22
 1535 011e 01       		.byte	0x1
 1536 011f 61       		.byte	0x61
 1537 0120 81000000 		.4byte	0x81
 1538 0124 02       		.uleb128 0x2
 1539 0125 91       		.byte	0x91
 1540 0126 6C       		.sleb128 -20
 1541 0127 09       		.uleb128 0x9
 1542 0128 27000000 		.4byte	.LASF23
 1543 012c 01       		.byte	0x1
 1544 012d 62       		.byte	0x62
 1545 012e 97000000 		.4byte	0x97
 1546 0132 02       		.uleb128 0x2
 1547 0133 91       		.byte	0x91
 1548 0134 70       		.sleb128 -16
 1549 0135 09       		.uleb128 0x9
 1550 0136 21010000 		.4byte	.LASF24
 1551 013a 01       		.byte	0x1
 1552 013b 65       		.byte	0x65
 1553 013c 57010000 		.4byte	0x157
 1554 0140 05       		.uleb128 0x5
 1555 0141 03       		.byte	0x3
 1556 0142 08000000 		.4byte	ADC_SAR_SEQ_InputsPlacement.4742
 1557 0146 00       		.byte	0
 1558 0147 0A       		.uleb128 0xa
 1559 0148 6B000000 		.4byte	0x6b
 1560 014c 57010000 		.4byte	0x157
 1561 0150 0B       		.uleb128 0xb
 1562 0151 DE000000 		.4byte	0xde
 1563 0155 01       		.byte	0x1
 1564 0156 00       		.byte	0
 1565 0157 0C       		.uleb128 0xc
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 44


 1566 0158 47010000 		.4byte	0x147
 1567 015c 0D       		.uleb128 0xd
 1568 015d 75020000 		.4byte	.LASF26
 1569 0161 01       		.byte	0x1
 1570 0162 4A01     		.2byte	0x14a
 1571 0164 00000000 		.4byte	.LFB2
 1572 0168 28000000 		.4byte	.LFE2-.LFB2
 1573 016c 01       		.uleb128 0x1
 1574 016d 9C       		.byte	0x9c
 1575 016e 0E       		.uleb128 0xe
 1576 016f 64020000 		.4byte	.LASF27
 1577 0173 01       		.byte	0x1
 1578 0174 6D01     		.2byte	0x16d
 1579 0176 00000000 		.4byte	.LFB3
 1580 017a 18000000 		.4byte	.LFE3-.LFB3
 1581 017e 01       		.uleb128 0x1
 1582 017f 9C       		.byte	0x9c
 1583 0180 0E       		.uleb128 0xe
 1584 0181 24030000 		.4byte	.LASF28
 1585 0185 01       		.byte	0x1
 1586 0186 8701     		.2byte	0x187
 1587 0188 00000000 		.4byte	.LFB4
 1588 018c 1C000000 		.4byte	.LFE4-.LFB4
 1589 0190 01       		.uleb128 0x1
 1590 0191 9C       		.byte	0x9c
 1591 0192 0E       		.uleb128 0xe
 1592 0193 02010000 		.4byte	.LASF29
 1593 0197 01       		.byte	0x1
 1594 0198 A001     		.2byte	0x1a0
 1595 019a 00000000 		.4byte	.LFB5
 1596 019e 1C000000 		.4byte	.LFE5-.LFB5
 1597 01a2 01       		.uleb128 0x1
 1598 01a3 9C       		.byte	0x9c
 1599 01a4 0F       		.uleb128 0xf
 1600 01a5 E5020000 		.4byte	.LASF31
 1601 01a9 01       		.byte	0x1
 1602 01aa C201     		.2byte	0x1c2
 1603 01ac 81000000 		.4byte	0x81
 1604 01b0 00000000 		.4byte	.LFB6
 1605 01b4 7C000000 		.4byte	.LFE6-.LFB6
 1606 01b8 01       		.uleb128 0x1
 1607 01b9 9C       		.byte	0x9c
 1608 01ba DD010000 		.4byte	0x1dd
 1609 01be 10       		.uleb128 0x10
 1610 01bf 49010000 		.4byte	.LASF33
 1611 01c3 01       		.byte	0x1
 1612 01c4 C201     		.2byte	0x1c2
 1613 01c6 81000000 		.4byte	0x81
 1614 01ca 02       		.uleb128 0x2
 1615 01cb 91       		.byte	0x91
 1616 01cc 6C       		.sleb128 -20
 1617 01cd 11       		.uleb128 0x11
 1618 01ce BE030000 		.4byte	.LASF30
 1619 01d2 01       		.byte	0x1
 1620 01d3 C401     		.2byte	0x1c4
 1621 01d5 81000000 		.4byte	0x81
 1622 01d9 02       		.uleb128 0x2
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 45


 1623 01da 91       		.byte	0x91
 1624 01db 74       		.sleb128 -12
 1625 01dc 00       		.byte	0
 1626 01dd 12       		.uleb128 0x12
 1627 01de 7C030000 		.4byte	.LASF32
 1628 01e2 01       		.byte	0x1
 1629 01e3 F801     		.2byte	0x1f8
 1630 01e5 8C000000 		.4byte	0x8c
 1631 01e9 00000000 		.4byte	.LFB7
 1632 01ed 50000000 		.4byte	.LFE7-.LFB7
 1633 01f1 01       		.uleb128 0x1
 1634 01f2 9C       		.byte	0x9c
 1635 01f3 16020000 		.4byte	0x216
 1636 01f7 10       		.uleb128 0x10
 1637 01f8 72030000 		.4byte	.LASF34
 1638 01fc 01       		.byte	0x1
 1639 01fd F801     		.2byte	0x1f8
 1640 01ff 81000000 		.4byte	0x81
 1641 0203 02       		.uleb128 0x2
 1642 0204 91       		.byte	0x91
 1643 0205 6C       		.sleb128 -20
 1644 0206 11       		.uleb128 0x11
 1645 0207 6A040000 		.4byte	.LASF35
 1646 020b 01       		.byte	0x1
 1647 020c FA01     		.2byte	0x1fa
 1648 020e 81000000 		.4byte	0x81
 1649 0212 02       		.uleb128 0x2
 1650 0213 91       		.byte	0x91
 1651 0214 74       		.sleb128 -12
 1652 0215 00       		.byte	0
 1653 0216 13       		.uleb128 0x13
 1654 0217 BB000000 		.4byte	.LASF37
 1655 021b 01       		.byte	0x1
 1656 021c 2502     		.2byte	0x225
 1657 021e 00000000 		.4byte	.LFB8
 1658 0222 1C000000 		.4byte	.LFE8-.LFB8
 1659 0226 01       		.uleb128 0x1
 1660 0227 9C       		.byte	0x9c
 1661 0228 3C020000 		.4byte	0x23c
 1662 022c 10       		.uleb128 0x10
 1663 022d 44010000 		.4byte	.LASF38
 1664 0231 01       		.byte	0x1
 1665 0232 2502     		.2byte	0x225
 1666 0234 81000000 		.4byte	0x81
 1667 0238 02       		.uleb128 0x2
 1668 0239 91       		.byte	0x91
 1669 023a 74       		.sleb128 -12
 1670 023b 00       		.byte	0
 1671 023c 0E       		.uleb128 0xe
 1672 023d BF020000 		.4byte	.LASF39
 1673 0241 01       		.byte	0x1
 1674 0242 3B02     		.2byte	0x23b
 1675 0244 00000000 		.4byte	.LFB9
 1676 0248 1C000000 		.4byte	.LFE9-.LFB9
 1677 024c 01       		.uleb128 0x1
 1678 024d 9C       		.byte	0x9c
 1679 024e 13       		.uleb128 0x13
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 46


 1680 024f 00000000 		.4byte	.LASF40
 1681 0253 01       		.byte	0x1
 1682 0254 5102     		.2byte	0x251
 1683 0256 00000000 		.4byte	.LFB10
 1684 025a 30000000 		.4byte	.LFE10-.LFB10
 1685 025e 01       		.uleb128 0x1
 1686 025f 9C       		.byte	0x9c
 1687 0260 74020000 		.4byte	0x274
 1688 0264 10       		.uleb128 0x10
 1689 0265 3E020000 		.4byte	.LASF41
 1690 0269 01       		.byte	0x1
 1691 026a 5102     		.2byte	0x251
 1692 026c 81000000 		.4byte	0x81
 1693 0270 02       		.uleb128 0x2
 1694 0271 91       		.byte	0x91
 1695 0272 74       		.sleb128 -12
 1696 0273 00       		.byte	0
 1697 0274 13       		.uleb128 0x13
 1698 0275 9B030000 		.4byte	.LASF42
 1699 0279 01       		.byte	0x1
 1700 027a 6602     		.2byte	0x266
 1701 027c 00000000 		.4byte	.LFB11
 1702 0280 2C000000 		.4byte	.LFE11-.LFB11
 1703 0284 01       		.uleb128 0x1
 1704 0285 9C       		.byte	0x9c
 1705 0286 9A020000 		.4byte	0x29a
 1706 028a 10       		.uleb128 0x10
 1707 028b 8E020000 		.4byte	.LASF43
 1708 028f 01       		.byte	0x1
 1709 0290 6602     		.2byte	0x266
 1710 0292 81000000 		.4byte	0x81
 1711 0296 02       		.uleb128 0x2
 1712 0297 91       		.byte	0x91
 1713 0298 74       		.sleb128 -12
 1714 0299 00       		.byte	0
 1715 029a 13       		.uleb128 0x13
 1716 029b 98020000 		.4byte	.LASF44
 1717 029f 01       		.byte	0x1
 1718 02a0 7E02     		.2byte	0x27e
 1719 02a2 00000000 		.4byte	.LFB12
 1720 02a6 1C000000 		.4byte	.LFE12-.LFB12
 1721 02aa 01       		.uleb128 0x1
 1722 02ab 9C       		.byte	0x9c
 1723 02ac C0020000 		.4byte	0x2c0
 1724 02b0 10       		.uleb128 0x10
 1725 02b1 44010000 		.4byte	.LASF38
 1726 02b5 01       		.byte	0x1
 1727 02b6 7E02     		.2byte	0x27e
 1728 02b8 81000000 		.4byte	0x81
 1729 02bc 02       		.uleb128 0x2
 1730 02bd 91       		.byte	0x91
 1731 02be 74       		.sleb128 -12
 1732 02bf 00       		.byte	0
 1733 02c0 13       		.uleb128 0x13
 1734 02c1 47020000 		.4byte	.LASF45
 1735 02c5 01       		.byte	0x1
 1736 02c6 9502     		.2byte	0x295
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 47


 1737 02c8 00000000 		.4byte	.LFB13
 1738 02cc 1C000000 		.4byte	.LFE13-.LFB13
 1739 02d0 01       		.uleb128 0x1
 1740 02d1 9C       		.byte	0x9c
 1741 02d2 E6020000 		.4byte	0x2e6
 1742 02d6 10       		.uleb128 0x10
 1743 02d7 44010000 		.4byte	.LASF38
 1744 02db 01       		.byte	0x1
 1745 02dc 9502     		.2byte	0x295
 1746 02de 81000000 		.4byte	0x81
 1747 02e2 02       		.uleb128 0x2
 1748 02e3 91       		.byte	0x91
 1749 02e4 74       		.sleb128 -12
 1750 02e5 00       		.byte	0
 1751 02e6 14       		.uleb128 0x14
 1752 02e7 42000000 		.4byte	.LASF46
 1753 02eb 01       		.byte	0x1
 1754 02ec B102     		.2byte	0x2b1
 1755 02ee 00000000 		.4byte	.LFB14
 1756 02f2 30000000 		.4byte	.LFE14-.LFB14
 1757 02f6 01       		.uleb128 0x1
 1758 02f7 9C       		.byte	0x9c
 1759 02f8 1B030000 		.4byte	0x31b
 1760 02fc 10       		.uleb128 0x10
 1761 02fd 72030000 		.4byte	.LASF34
 1762 0301 01       		.byte	0x1
 1763 0302 B102     		.2byte	0x2b1
 1764 0304 81000000 		.4byte	0x81
 1765 0308 02       		.uleb128 0x2
 1766 0309 91       		.byte	0x91
 1767 030a 74       		.sleb128 -12
 1768 030b 10       		.uleb128 0x10
 1769 030c 94030000 		.4byte	.LASF47
 1770 0310 01       		.byte	0x1
 1771 0311 B102     		.2byte	0x2b1
 1772 0313 8C000000 		.4byte	0x8c
 1773 0317 02       		.uleb128 0x2
 1774 0318 91       		.byte	0x91
 1775 0319 72       		.sleb128 -14
 1776 031a 00       		.byte	0
 1777 031b 14       		.uleb128 0x14
 1778 031c 2E000000 		.4byte	.LASF48
 1779 0320 01       		.byte	0x1
 1780 0321 D302     		.2byte	0x2d3
 1781 0323 00000000 		.4byte	.LFB15
 1782 0327 2C000000 		.4byte	.LFE15-.LFB15
 1783 032b 01       		.uleb128 0x1
 1784 032c 9C       		.byte	0x9c
 1785 032d 50030000 		.4byte	0x350
 1786 0331 10       		.uleb128 0x10
 1787 0332 72030000 		.4byte	.LASF34
 1788 0336 01       		.byte	0x1
 1789 0337 D302     		.2byte	0x2d3
 1790 0339 81000000 		.4byte	0x81
 1791 033d 02       		.uleb128 0x2
 1792 033e 91       		.byte	0x91
 1793 033f 74       		.sleb128 -12
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 48


 1794 0340 10       		.uleb128 0x10
 1795 0341 1F000000 		.4byte	.LASF49
 1796 0345 01       		.byte	0x1
 1797 0346 D302     		.2byte	0x2d3
 1798 0348 97000000 		.4byte	0x97
 1799 034c 02       		.uleb128 0x2
 1800 034d 91       		.byte	0x91
 1801 034e 70       		.sleb128 -16
 1802 034f 00       		.byte	0
 1803 0350 12       		.uleb128 0x12
 1804 0351 B6010000 		.4byte	.LASF50
 1805 0355 01       		.byte	0x1
 1806 0356 F402     		.2byte	0x2f4
 1807 0358 8C000000 		.4byte	0x8c
 1808 035c 00000000 		.4byte	.LFB16
 1809 0360 A4000000 		.4byte	.LFE16-.LFB16
 1810 0364 01       		.uleb128 0x1
 1811 0365 9C       		.byte	0x9c
 1812 0366 98030000 		.4byte	0x398
 1813 036a 10       		.uleb128 0x10
 1814 036b 72030000 		.4byte	.LASF34
 1815 036f 01       		.byte	0x1
 1816 0370 F402     		.2byte	0x2f4
 1817 0372 81000000 		.4byte	0x81
 1818 0376 02       		.uleb128 0x2
 1819 0377 91       		.byte	0x91
 1820 0378 6C       		.sleb128 -20
 1821 0379 10       		.uleb128 0x10
 1822 037a B4030000 		.4byte	.LASF51
 1823 037e 01       		.byte	0x1
 1824 037f F402     		.2byte	0x2f4
 1825 0381 8C000000 		.4byte	0x8c
 1826 0385 02       		.uleb128 0x2
 1827 0386 91       		.byte	0x91
 1828 0387 6A       		.sleb128 -22
 1829 0388 11       		.uleb128 0x11
 1830 0389 01030000 		.4byte	.LASF52
 1831 038d 01       		.byte	0x1
 1832 038e F602     		.2byte	0x2f6
 1833 0390 8C000000 		.4byte	0x8c
 1834 0394 02       		.uleb128 0x2
 1835 0395 91       		.byte	0x91
 1836 0396 76       		.sleb128 -10
 1837 0397 00       		.byte	0
 1838 0398 12       		.uleb128 0x12
 1839 0399 5E010000 		.4byte	.LASF53
 1840 039d 01       		.byte	0x1
 1841 039e 2A03     		.2byte	0x32a
 1842 03a0 97000000 		.4byte	0x97
 1843 03a4 00000000 		.4byte	.LFB17
 1844 03a8 90000000 		.4byte	.LFE17-.LFB17
 1845 03ac 01       		.uleb128 0x1
 1846 03ad 9C       		.byte	0x9c
 1847 03ae E0030000 		.4byte	0x3e0
 1848 03b2 10       		.uleb128 0x10
 1849 03b3 72030000 		.4byte	.LASF34
 1850 03b7 01       		.byte	0x1
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 49


 1851 03b8 2A03     		.2byte	0x32a
 1852 03ba 81000000 		.4byte	0x81
 1853 03be 02       		.uleb128 0x2
 1854 03bf 91       		.byte	0x91
 1855 03c0 64       		.sleb128 -28
 1856 03c1 10       		.uleb128 0x10
 1857 03c2 B4030000 		.4byte	.LASF51
 1858 03c6 01       		.byte	0x1
 1859 03c7 2A03     		.2byte	0x32a
 1860 03c9 8C000000 		.4byte	0x8c
 1861 03cd 02       		.uleb128 0x2
 1862 03ce 91       		.byte	0x91
 1863 03cf 62       		.sleb128 -30
 1864 03d0 11       		.uleb128 0x11
 1865 03d1 7A010000 		.4byte	.LASF54
 1866 03d5 01       		.byte	0x1
 1867 03d6 2C03     		.2byte	0x32c
 1868 03d8 BB000000 		.4byte	0xbb
 1869 03dc 02       		.uleb128 0x2
 1870 03dd 91       		.byte	0x91
 1871 03de 68       		.sleb128 -24
 1872 03df 00       		.byte	0
 1873 03e0 12       		.uleb128 0x12
 1874 03e1 71040000 		.4byte	.LASF55
 1875 03e5 01       		.byte	0x1
 1876 03e6 5703     		.2byte	0x357
 1877 03e8 A2000000 		.4byte	0xa2
 1878 03ec 00000000 		.4byte	.LFB18
 1879 03f0 80000000 		.4byte	.LFE18-.LFB18
 1880 03f4 01       		.uleb128 0x1
 1881 03f5 9C       		.byte	0x9c
 1882 03f6 28040000 		.4byte	0x428
 1883 03fa 10       		.uleb128 0x10
 1884 03fb 72030000 		.4byte	.LASF34
 1885 03ff 01       		.byte	0x1
 1886 0400 5703     		.2byte	0x357
 1887 0402 81000000 		.4byte	0x81
 1888 0406 02       		.uleb128 0x2
 1889 0407 91       		.byte	0x91
 1890 0408 64       		.sleb128 -28
 1891 0409 10       		.uleb128 0x10
 1892 040a B4030000 		.4byte	.LASF51
 1893 040e 01       		.byte	0x1
 1894 040f 5703     		.2byte	0x357
 1895 0411 8C000000 		.4byte	0x8c
 1896 0415 02       		.uleb128 0x2
 1897 0416 91       		.byte	0x91
 1898 0417 62       		.sleb128 -30
 1899 0418 11       		.uleb128 0x11
 1900 0419 93010000 		.4byte	.LASF56
 1901 041d 01       		.byte	0x1
 1902 041e 5903     		.2byte	0x359
 1903 0420 A2000000 		.4byte	0xa2
 1904 0424 02       		.uleb128 0x2
 1905 0425 91       		.byte	0x91
 1906 0426 6C       		.sleb128 -20
 1907 0427 00       		.byte	0
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 50


 1908 0428 0A       		.uleb128 0xa
 1909 0429 81000000 		.4byte	0x81
 1910 042d 38040000 		.4byte	0x438
 1911 0431 0B       		.uleb128 0xb
 1912 0432 DE000000 		.4byte	0xde
 1913 0436 01       		.byte	0x1
 1914 0437 00       		.byte	0
 1915 0438 09       		.uleb128 0x9
 1916 0439 43030000 		.4byte	.LASF57
 1917 043d 01       		.byte	0x1
 1918 043e 21       		.byte	0x21
 1919 043f 49040000 		.4byte	0x449
 1920 0443 05       		.uleb128 0x5
 1921 0444 03       		.byte	0x3
 1922 0445 00000000 		.4byte	ADC_SAR_SEQ_channelsConfig
 1923 0449 0C       		.uleb128 0xc
 1924 044a 28040000 		.4byte	0x428
 1925 044e 15       		.uleb128 0x15
 1926 044f 5E030000 		.4byte	.LASF58
 1927 0453 01       		.byte	0x1
 1928 0454 18       		.byte	0x18
 1929 0455 6B000000 		.4byte	0x6b
 1930 0459 05       		.uleb128 0x5
 1931 045a 03       		.byte	0x3
 1932 045b 00000000 		.4byte	ADC_SAR_SEQ_initVar
 1933 045f 0A       		.uleb128 0xa
 1934 0460 8C000000 		.4byte	0x8c
 1935 0464 6F040000 		.4byte	0x46f
 1936 0468 0B       		.uleb128 0xb
 1937 0469 DE000000 		.4byte	0xde
 1938 046d 01       		.byte	0x1
 1939 046e 00       		.byte	0
 1940 046f 15       		.uleb128 0x15
 1941 0470 A8000000 		.4byte	.LASF59
 1942 0474 01       		.byte	0x1
 1943 0475 19       		.byte	0x19
 1944 0476 80040000 		.4byte	0x480
 1945 047a 05       		.uleb128 0x5
 1946 047b 03       		.byte	0x3
 1947 047c 00000000 		.4byte	ADC_SAR_SEQ_offset
 1948 0480 06       		.uleb128 0x6
 1949 0481 5F040000 		.4byte	0x45f
 1950 0485 0A       		.uleb128 0xa
 1951 0486 97000000 		.4byte	0x97
 1952 048a 95040000 		.4byte	0x495
 1953 048e 0B       		.uleb128 0xb
 1954 048f DE000000 		.4byte	0xde
 1955 0493 01       		.byte	0x1
 1956 0494 00       		.byte	0
 1957 0495 15       		.uleb128 0x15
 1958 0496 08030000 		.4byte	.LASF60
 1959 049a 01       		.byte	0x1
 1960 049b 1A       		.byte	0x1a
 1961 049c A6040000 		.4byte	0x4a6
 1962 04a0 05       		.uleb128 0x5
 1963 04a1 03       		.byte	0x3
 1964 04a2 00000000 		.4byte	ADC_SAR_SEQ_countsPer10Volt
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 51


 1965 04a6 06       		.uleb128 0x6
 1966 04a7 85040000 		.4byte	0x485
 1967 04ab 00       		.byte	0
 1968              		.section	.debug_abbrev,"",%progbits
 1969              	.Ldebug_abbrev0:
 1970 0000 01       		.uleb128 0x1
 1971 0001 11       		.uleb128 0x11
 1972 0002 01       		.byte	0x1
 1973 0003 25       		.uleb128 0x25
 1974 0004 0E       		.uleb128 0xe
 1975 0005 13       		.uleb128 0x13
 1976 0006 0B       		.uleb128 0xb
 1977 0007 03       		.uleb128 0x3
 1978 0008 0E       		.uleb128 0xe
 1979 0009 1B       		.uleb128 0x1b
 1980 000a 0E       		.uleb128 0xe
 1981 000b 55       		.uleb128 0x55
 1982 000c 17       		.uleb128 0x17
 1983 000d 11       		.uleb128 0x11
 1984 000e 01       		.uleb128 0x1
 1985 000f 10       		.uleb128 0x10
 1986 0010 17       		.uleb128 0x17
 1987 0011 00       		.byte	0
 1988 0012 00       		.byte	0
 1989 0013 02       		.uleb128 0x2
 1990 0014 24       		.uleb128 0x24
 1991 0015 00       		.byte	0
 1992 0016 0B       		.uleb128 0xb
 1993 0017 0B       		.uleb128 0xb
 1994 0018 3E       		.uleb128 0x3e
 1995 0019 0B       		.uleb128 0xb
 1996 001a 03       		.uleb128 0x3
 1997 001b 0E       		.uleb128 0xe
 1998 001c 00       		.byte	0
 1999 001d 00       		.byte	0
 2000 001e 03       		.uleb128 0x3
 2001 001f 24       		.uleb128 0x24
 2002 0020 00       		.byte	0
 2003 0021 0B       		.uleb128 0xb
 2004 0022 0B       		.uleb128 0xb
 2005 0023 3E       		.uleb128 0x3e
 2006 0024 0B       		.uleb128 0xb
 2007 0025 03       		.uleb128 0x3
 2008 0026 08       		.uleb128 0x8
 2009 0027 00       		.byte	0
 2010 0028 00       		.byte	0
 2011 0029 04       		.uleb128 0x4
 2012 002a 16       		.uleb128 0x16
 2013 002b 00       		.byte	0
 2014 002c 03       		.uleb128 0x3
 2015 002d 0E       		.uleb128 0xe
 2016 002e 3A       		.uleb128 0x3a
 2017 002f 0B       		.uleb128 0xb
 2018 0030 3B       		.uleb128 0x3b
 2019 0031 0B       		.uleb128 0xb
 2020 0032 49       		.uleb128 0x49
 2021 0033 13       		.uleb128 0x13
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 52


 2022 0034 00       		.byte	0
 2023 0035 00       		.byte	0
 2024 0036 05       		.uleb128 0x5
 2025 0037 16       		.uleb128 0x16
 2026 0038 00       		.byte	0
 2027 0039 03       		.uleb128 0x3
 2028 003a 0E       		.uleb128 0xe
 2029 003b 3A       		.uleb128 0x3a
 2030 003c 0B       		.uleb128 0xb
 2031 003d 3B       		.uleb128 0x3b
 2032 003e 05       		.uleb128 0x5
 2033 003f 49       		.uleb128 0x49
 2034 0040 13       		.uleb128 0x13
 2035 0041 00       		.byte	0
 2036 0042 00       		.byte	0
 2037 0043 06       		.uleb128 0x6
 2038 0044 35       		.uleb128 0x35
 2039 0045 00       		.byte	0
 2040 0046 49       		.uleb128 0x49
 2041 0047 13       		.uleb128 0x13
 2042 0048 00       		.byte	0
 2043 0049 00       		.byte	0
 2044 004a 07       		.uleb128 0x7
 2045 004b 2E       		.uleb128 0x2e
 2046 004c 00       		.byte	0
 2047 004d 3F       		.uleb128 0x3f
 2048 004e 19       		.uleb128 0x19
 2049 004f 03       		.uleb128 0x3
 2050 0050 0E       		.uleb128 0xe
 2051 0051 3A       		.uleb128 0x3a
 2052 0052 0B       		.uleb128 0xb
 2053 0053 3B       		.uleb128 0x3b
 2054 0054 0B       		.uleb128 0xb
 2055 0055 27       		.uleb128 0x27
 2056 0056 19       		.uleb128 0x19
 2057 0057 11       		.uleb128 0x11
 2058 0058 01       		.uleb128 0x1
 2059 0059 12       		.uleb128 0x12
 2060 005a 06       		.uleb128 0x6
 2061 005b 40       		.uleb128 0x40
 2062 005c 18       		.uleb128 0x18
 2063 005d 9642     		.uleb128 0x2116
 2064 005f 19       		.uleb128 0x19
 2065 0060 00       		.byte	0
 2066 0061 00       		.byte	0
 2067 0062 08       		.uleb128 0x8
 2068 0063 2E       		.uleb128 0x2e
 2069 0064 01       		.byte	0x1
 2070 0065 3F       		.uleb128 0x3f
 2071 0066 19       		.uleb128 0x19
 2072 0067 03       		.uleb128 0x3
 2073 0068 0E       		.uleb128 0xe
 2074 0069 3A       		.uleb128 0x3a
 2075 006a 0B       		.uleb128 0xb
 2076 006b 3B       		.uleb128 0x3b
 2077 006c 0B       		.uleb128 0xb
 2078 006d 27       		.uleb128 0x27
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 53


 2079 006e 19       		.uleb128 0x19
 2080 006f 11       		.uleb128 0x11
 2081 0070 01       		.uleb128 0x1
 2082 0071 12       		.uleb128 0x12
 2083 0072 06       		.uleb128 0x6
 2084 0073 40       		.uleb128 0x40
 2085 0074 18       		.uleb128 0x18
 2086 0075 9642     		.uleb128 0x2116
 2087 0077 19       		.uleb128 0x19
 2088 0078 01       		.uleb128 0x1
 2089 0079 13       		.uleb128 0x13
 2090 007a 00       		.byte	0
 2091 007b 00       		.byte	0
 2092 007c 09       		.uleb128 0x9
 2093 007d 34       		.uleb128 0x34
 2094 007e 00       		.byte	0
 2095 007f 03       		.uleb128 0x3
 2096 0080 0E       		.uleb128 0xe
 2097 0081 3A       		.uleb128 0x3a
 2098 0082 0B       		.uleb128 0xb
 2099 0083 3B       		.uleb128 0x3b
 2100 0084 0B       		.uleb128 0xb
 2101 0085 49       		.uleb128 0x49
 2102 0086 13       		.uleb128 0x13
 2103 0087 02       		.uleb128 0x2
 2104 0088 18       		.uleb128 0x18
 2105 0089 00       		.byte	0
 2106 008a 00       		.byte	0
 2107 008b 0A       		.uleb128 0xa
 2108 008c 01       		.uleb128 0x1
 2109 008d 01       		.byte	0x1
 2110 008e 49       		.uleb128 0x49
 2111 008f 13       		.uleb128 0x13
 2112 0090 01       		.uleb128 0x1
 2113 0091 13       		.uleb128 0x13
 2114 0092 00       		.byte	0
 2115 0093 00       		.byte	0
 2116 0094 0B       		.uleb128 0xb
 2117 0095 21       		.uleb128 0x21
 2118 0096 00       		.byte	0
 2119 0097 49       		.uleb128 0x49
 2120 0098 13       		.uleb128 0x13
 2121 0099 2F       		.uleb128 0x2f
 2122 009a 0B       		.uleb128 0xb
 2123 009b 00       		.byte	0
 2124 009c 00       		.byte	0
 2125 009d 0C       		.uleb128 0xc
 2126 009e 26       		.uleb128 0x26
 2127 009f 00       		.byte	0
 2128 00a0 49       		.uleb128 0x49
 2129 00a1 13       		.uleb128 0x13
 2130 00a2 00       		.byte	0
 2131 00a3 00       		.byte	0
 2132 00a4 0D       		.uleb128 0xd
 2133 00a5 2E       		.uleb128 0x2e
 2134 00a6 00       		.byte	0
 2135 00a7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 54


 2136 00a8 19       		.uleb128 0x19
 2137 00a9 03       		.uleb128 0x3
 2138 00aa 0E       		.uleb128 0xe
 2139 00ab 3A       		.uleb128 0x3a
 2140 00ac 0B       		.uleb128 0xb
 2141 00ad 3B       		.uleb128 0x3b
 2142 00ae 05       		.uleb128 0x5
 2143 00af 27       		.uleb128 0x27
 2144 00b0 19       		.uleb128 0x19
 2145 00b1 11       		.uleb128 0x11
 2146 00b2 01       		.uleb128 0x1
 2147 00b3 12       		.uleb128 0x12
 2148 00b4 06       		.uleb128 0x6
 2149 00b5 40       		.uleb128 0x40
 2150 00b6 18       		.uleb128 0x18
 2151 00b7 9642     		.uleb128 0x2116
 2152 00b9 19       		.uleb128 0x19
 2153 00ba 00       		.byte	0
 2154 00bb 00       		.byte	0
 2155 00bc 0E       		.uleb128 0xe
 2156 00bd 2E       		.uleb128 0x2e
 2157 00be 00       		.byte	0
 2158 00bf 3F       		.uleb128 0x3f
 2159 00c0 19       		.uleb128 0x19
 2160 00c1 03       		.uleb128 0x3
 2161 00c2 0E       		.uleb128 0xe
 2162 00c3 3A       		.uleb128 0x3a
 2163 00c4 0B       		.uleb128 0xb
 2164 00c5 3B       		.uleb128 0x3b
 2165 00c6 05       		.uleb128 0x5
 2166 00c7 27       		.uleb128 0x27
 2167 00c8 19       		.uleb128 0x19
 2168 00c9 11       		.uleb128 0x11
 2169 00ca 01       		.uleb128 0x1
 2170 00cb 12       		.uleb128 0x12
 2171 00cc 06       		.uleb128 0x6
 2172 00cd 40       		.uleb128 0x40
 2173 00ce 18       		.uleb128 0x18
 2174 00cf 9742     		.uleb128 0x2117
 2175 00d1 19       		.uleb128 0x19
 2176 00d2 00       		.byte	0
 2177 00d3 00       		.byte	0
 2178 00d4 0F       		.uleb128 0xf
 2179 00d5 2E       		.uleb128 0x2e
 2180 00d6 01       		.byte	0x1
 2181 00d7 3F       		.uleb128 0x3f
 2182 00d8 19       		.uleb128 0x19
 2183 00d9 03       		.uleb128 0x3
 2184 00da 0E       		.uleb128 0xe
 2185 00db 3A       		.uleb128 0x3a
 2186 00dc 0B       		.uleb128 0xb
 2187 00dd 3B       		.uleb128 0x3b
 2188 00de 05       		.uleb128 0x5
 2189 00df 27       		.uleb128 0x27
 2190 00e0 19       		.uleb128 0x19
 2191 00e1 49       		.uleb128 0x49
 2192 00e2 13       		.uleb128 0x13
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 55


 2193 00e3 11       		.uleb128 0x11
 2194 00e4 01       		.uleb128 0x1
 2195 00e5 12       		.uleb128 0x12
 2196 00e6 06       		.uleb128 0x6
 2197 00e7 40       		.uleb128 0x40
 2198 00e8 18       		.uleb128 0x18
 2199 00e9 9742     		.uleb128 0x2117
 2200 00eb 19       		.uleb128 0x19
 2201 00ec 01       		.uleb128 0x1
 2202 00ed 13       		.uleb128 0x13
 2203 00ee 00       		.byte	0
 2204 00ef 00       		.byte	0
 2205 00f0 10       		.uleb128 0x10
 2206 00f1 05       		.uleb128 0x5
 2207 00f2 00       		.byte	0
 2208 00f3 03       		.uleb128 0x3
 2209 00f4 0E       		.uleb128 0xe
 2210 00f5 3A       		.uleb128 0x3a
 2211 00f6 0B       		.uleb128 0xb
 2212 00f7 3B       		.uleb128 0x3b
 2213 00f8 05       		.uleb128 0x5
 2214 00f9 49       		.uleb128 0x49
 2215 00fa 13       		.uleb128 0x13
 2216 00fb 02       		.uleb128 0x2
 2217 00fc 18       		.uleb128 0x18
 2218 00fd 00       		.byte	0
 2219 00fe 00       		.byte	0
 2220 00ff 11       		.uleb128 0x11
 2221 0100 34       		.uleb128 0x34
 2222 0101 00       		.byte	0
 2223 0102 03       		.uleb128 0x3
 2224 0103 0E       		.uleb128 0xe
 2225 0104 3A       		.uleb128 0x3a
 2226 0105 0B       		.uleb128 0xb
 2227 0106 3B       		.uleb128 0x3b
 2228 0107 05       		.uleb128 0x5
 2229 0108 49       		.uleb128 0x49
 2230 0109 13       		.uleb128 0x13
 2231 010a 02       		.uleb128 0x2
 2232 010b 18       		.uleb128 0x18
 2233 010c 00       		.byte	0
 2234 010d 00       		.byte	0
 2235 010e 12       		.uleb128 0x12
 2236 010f 2E       		.uleb128 0x2e
 2237 0110 01       		.byte	0x1
 2238 0111 3F       		.uleb128 0x3f
 2239 0112 19       		.uleb128 0x19
 2240 0113 03       		.uleb128 0x3
 2241 0114 0E       		.uleb128 0xe
 2242 0115 3A       		.uleb128 0x3a
 2243 0116 0B       		.uleb128 0xb
 2244 0117 3B       		.uleb128 0x3b
 2245 0118 05       		.uleb128 0x5
 2246 0119 27       		.uleb128 0x27
 2247 011a 19       		.uleb128 0x19
 2248 011b 49       		.uleb128 0x49
 2249 011c 13       		.uleb128 0x13
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 56


 2250 011d 11       		.uleb128 0x11
 2251 011e 01       		.uleb128 0x1
 2252 011f 12       		.uleb128 0x12
 2253 0120 06       		.uleb128 0x6
 2254 0121 40       		.uleb128 0x40
 2255 0122 18       		.uleb128 0x18
 2256 0123 9642     		.uleb128 0x2116
 2257 0125 19       		.uleb128 0x19
 2258 0126 01       		.uleb128 0x1
 2259 0127 13       		.uleb128 0x13
 2260 0128 00       		.byte	0
 2261 0129 00       		.byte	0
 2262 012a 13       		.uleb128 0x13
 2263 012b 2E       		.uleb128 0x2e
 2264 012c 01       		.byte	0x1
 2265 012d 3F       		.uleb128 0x3f
 2266 012e 19       		.uleb128 0x19
 2267 012f 03       		.uleb128 0x3
 2268 0130 0E       		.uleb128 0xe
 2269 0131 3A       		.uleb128 0x3a
 2270 0132 0B       		.uleb128 0xb
 2271 0133 3B       		.uleb128 0x3b
 2272 0134 05       		.uleb128 0x5
 2273 0135 27       		.uleb128 0x27
 2274 0136 19       		.uleb128 0x19
 2275 0137 11       		.uleb128 0x11
 2276 0138 01       		.uleb128 0x1
 2277 0139 12       		.uleb128 0x12
 2278 013a 06       		.uleb128 0x6
 2279 013b 40       		.uleb128 0x40
 2280 013c 18       		.uleb128 0x18
 2281 013d 9742     		.uleb128 0x2117
 2282 013f 19       		.uleb128 0x19
 2283 0140 01       		.uleb128 0x1
 2284 0141 13       		.uleb128 0x13
 2285 0142 00       		.byte	0
 2286 0143 00       		.byte	0
 2287 0144 14       		.uleb128 0x14
 2288 0145 2E       		.uleb128 0x2e
 2289 0146 01       		.byte	0x1
 2290 0147 3F       		.uleb128 0x3f
 2291 0148 19       		.uleb128 0x19
 2292 0149 03       		.uleb128 0x3
 2293 014a 0E       		.uleb128 0xe
 2294 014b 3A       		.uleb128 0x3a
 2295 014c 0B       		.uleb128 0xb
 2296 014d 3B       		.uleb128 0x3b
 2297 014e 05       		.uleb128 0x5
 2298 014f 27       		.uleb128 0x27
 2299 0150 19       		.uleb128 0x19
 2300 0151 11       		.uleb128 0x11
 2301 0152 01       		.uleb128 0x1
 2302 0153 12       		.uleb128 0x12
 2303 0154 06       		.uleb128 0x6
 2304 0155 40       		.uleb128 0x40
 2305 0156 18       		.uleb128 0x18
 2306 0157 9642     		.uleb128 0x2116
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 57


 2307 0159 19       		.uleb128 0x19
 2308 015a 01       		.uleb128 0x1
 2309 015b 13       		.uleb128 0x13
 2310 015c 00       		.byte	0
 2311 015d 00       		.byte	0
 2312 015e 15       		.uleb128 0x15
 2313 015f 34       		.uleb128 0x34
 2314 0160 00       		.byte	0
 2315 0161 03       		.uleb128 0x3
 2316 0162 0E       		.uleb128 0xe
 2317 0163 3A       		.uleb128 0x3a
 2318 0164 0B       		.uleb128 0xb
 2319 0165 3B       		.uleb128 0x3b
 2320 0166 0B       		.uleb128 0xb
 2321 0167 49       		.uleb128 0x49
 2322 0168 13       		.uleb128 0x13
 2323 0169 3F       		.uleb128 0x3f
 2324 016a 19       		.uleb128 0x19
 2325 016b 02       		.uleb128 0x2
 2326 016c 18       		.uleb128 0x18
 2327 016d 00       		.byte	0
 2328 016e 00       		.byte	0
 2329 016f 00       		.byte	0
 2330              		.section	.debug_aranges,"",%progbits
 2331 0000 AC000000 		.4byte	0xac
 2332 0004 0200     		.2byte	0x2
 2333 0006 00000000 		.4byte	.Ldebug_info0
 2334 000a 04       		.byte	0x4
 2335 000b 00       		.byte	0
 2336 000c 0000     		.2byte	0
 2337 000e 0000     		.2byte	0
 2338 0010 00000000 		.4byte	.LFB0
 2339 0014 24000000 		.4byte	.LFE0-.LFB0
 2340 0018 00000000 		.4byte	.LFB1
 2341 001c 5C020000 		.4byte	.LFE1-.LFB1
 2342 0020 00000000 		.4byte	.LFB2
 2343 0024 28000000 		.4byte	.LFE2-.LFB2
 2344 0028 00000000 		.4byte	.LFB3
 2345 002c 18000000 		.4byte	.LFE3-.LFB3
 2346 0030 00000000 		.4byte	.LFB4
 2347 0034 1C000000 		.4byte	.LFE4-.LFB4
 2348 0038 00000000 		.4byte	.LFB5
 2349 003c 1C000000 		.4byte	.LFE5-.LFB5
 2350 0040 00000000 		.4byte	.LFB6
 2351 0044 7C000000 		.4byte	.LFE6-.LFB6
 2352 0048 00000000 		.4byte	.LFB7
 2353 004c 50000000 		.4byte	.LFE7-.LFB7
 2354 0050 00000000 		.4byte	.LFB8
 2355 0054 1C000000 		.4byte	.LFE8-.LFB8
 2356 0058 00000000 		.4byte	.LFB9
 2357 005c 1C000000 		.4byte	.LFE9-.LFB9
 2358 0060 00000000 		.4byte	.LFB10
 2359 0064 30000000 		.4byte	.LFE10-.LFB10
 2360 0068 00000000 		.4byte	.LFB11
 2361 006c 2C000000 		.4byte	.LFE11-.LFB11
 2362 0070 00000000 		.4byte	.LFB12
 2363 0074 1C000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 58


 2364 0078 00000000 		.4byte	.LFB13
 2365 007c 1C000000 		.4byte	.LFE13-.LFB13
 2366 0080 00000000 		.4byte	.LFB14
 2367 0084 30000000 		.4byte	.LFE14-.LFB14
 2368 0088 00000000 		.4byte	.LFB15
 2369 008c 2C000000 		.4byte	.LFE15-.LFB15
 2370 0090 00000000 		.4byte	.LFB16
 2371 0094 A4000000 		.4byte	.LFE16-.LFB16
 2372 0098 00000000 		.4byte	.LFB17
 2373 009c 90000000 		.4byte	.LFE17-.LFB17
 2374 00a0 00000000 		.4byte	.LFB18
 2375 00a4 80000000 		.4byte	.LFE18-.LFB18
 2376 00a8 00000000 		.4byte	0
 2377 00ac 00000000 		.4byte	0
 2378              		.section	.debug_ranges,"",%progbits
 2379              	.Ldebug_ranges0:
 2380 0000 00000000 		.4byte	.LFB0
 2381 0004 24000000 		.4byte	.LFE0
 2382 0008 00000000 		.4byte	.LFB1
 2383 000c 5C020000 		.4byte	.LFE1
 2384 0010 00000000 		.4byte	.LFB2
 2385 0014 28000000 		.4byte	.LFE2
 2386 0018 00000000 		.4byte	.LFB3
 2387 001c 18000000 		.4byte	.LFE3
 2388 0020 00000000 		.4byte	.LFB4
 2389 0024 1C000000 		.4byte	.LFE4
 2390 0028 00000000 		.4byte	.LFB5
 2391 002c 1C000000 		.4byte	.LFE5
 2392 0030 00000000 		.4byte	.LFB6
 2393 0034 7C000000 		.4byte	.LFE6
 2394 0038 00000000 		.4byte	.LFB7
 2395 003c 50000000 		.4byte	.LFE7
 2396 0040 00000000 		.4byte	.LFB8
 2397 0044 1C000000 		.4byte	.LFE8
 2398 0048 00000000 		.4byte	.LFB9
 2399 004c 1C000000 		.4byte	.LFE9
 2400 0050 00000000 		.4byte	.LFB10
 2401 0054 30000000 		.4byte	.LFE10
 2402 0058 00000000 		.4byte	.LFB11
 2403 005c 2C000000 		.4byte	.LFE11
 2404 0060 00000000 		.4byte	.LFB12
 2405 0064 1C000000 		.4byte	.LFE12
 2406 0068 00000000 		.4byte	.LFB13
 2407 006c 1C000000 		.4byte	.LFE13
 2408 0070 00000000 		.4byte	.LFB14
 2409 0074 30000000 		.4byte	.LFE14
 2410 0078 00000000 		.4byte	.LFB15
 2411 007c 2C000000 		.4byte	.LFE15
 2412 0080 00000000 		.4byte	.LFB16
 2413 0084 A4000000 		.4byte	.LFE16
 2414 0088 00000000 		.4byte	.LFB17
 2415 008c 90000000 		.4byte	.LFE17
 2416 0090 00000000 		.4byte	.LFB18
 2417 0094 80000000 		.4byte	.LFE18
 2418 0098 00000000 		.4byte	0
 2419 009c 00000000 		.4byte	0
 2420              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 59


 2421              	.Ldebug_line0:
 2422 0000 C8020000 		.section	.debug_str,"MS",%progbits,1
 2422      02004A00 
 2422      00000201 
 2422      FB0E0D00 
 2422      01010101 
 2423              	.LASF40:
 2424 0000 4144435F 		.ascii	"ADC_SAR_SEQ_SetLowLimit\000"
 2424      5341525F 
 2424      5345515F 
 2424      5365744C 
 2424      6F774C69 
 2425              	.LASF10:
 2426 0018 75696E74 		.ascii	"uint16\000"
 2426      313600
 2427              	.LASF49:
 2428 001f 61646347 		.ascii	"adcGain\000"
 2428      61696E00 
 2429              	.LASF23:
 2430 0027 636F756E 		.ascii	"counts\000"
 2430      747300
 2431              	.LASF48:
 2432 002e 4144435F 		.ascii	"ADC_SAR_SEQ_SetGain\000"
 2432      5341525F 
 2432      5345515F 
 2432      53657447 
 2432      61696E00 
 2433              	.LASF46:
 2434 0042 4144435F 		.ascii	"ADC_SAR_SEQ_SetOffset\000"
 2434      5341525F 
 2434      5345515F 
 2434      5365744F 
 2434      66667365 
 2435              	.LASF25:
 2436 0058 4144435F 		.ascii	"ADC_SAR_SEQ_Start\000"
 2436      5341525F 
 2436      5345515F 
 2436      53746172 
 2436      7400
 2437              	.LASF62:
 2438 006a 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c\000"
 2438      6E657261 
 2438      7465645F 
 2438      536F7572 
 2438      63655C50 
 2439              	.LASF7:
 2440 0091 6C6F6E67 		.ascii	"long long unsigned int\000"
 2440      206C6F6E 
 2440      6720756E 
 2440      7369676E 
 2440      65642069 
 2441              	.LASF59:
 2442 00a8 4144435F 		.ascii	"ADC_SAR_SEQ_offset\000"
 2442      5341525F 
 2442      5345515F 
 2442      6F666673 
 2442      657400
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 60


 2443              	.LASF37:
 2444 00bb 4144435F 		.ascii	"ADC_SAR_SEQ_SetChanMask\000"
 2444      5341525F 
 2444      5345515F 
 2444      53657443 
 2444      68616E4D 
 2445              	.LASF6:
 2446 00d3 6C6F6E67 		.ascii	"long long int\000"
 2446      206C6F6E 
 2446      6720696E 
 2446      7400
 2447              	.LASF0:
 2448 00e1 7369676E 		.ascii	"signed char\000"
 2448      65642063 
 2448      68617200 
 2449              	.LASF13:
 2450 00ed 696E7433 		.ascii	"int32\000"
 2450      3200
 2451              	.LASF4:
 2452 00f3 6C6F6E67 		.ascii	"long int\000"
 2452      20696E74 
 2452      00
 2453              	.LASF9:
 2454 00fc 75696E74 		.ascii	"uint8\000"
 2454      3800
 2455              	.LASF29:
 2456 0102 4144435F 		.ascii	"ADC_SAR_SEQ_StopConvert\000"
 2456      5341525F 
 2456      5345515F 
 2456      53746F70 
 2456      436F6E76 
 2457              	.LASF16:
 2458 011a 646F7562 		.ascii	"double\000"
 2458      6C6500
 2459              	.LASF24:
 2460 0121 4144435F 		.ascii	"ADC_SAR_SEQ_InputsPlacement\000"
 2460      5341525F 
 2460      5345515F 
 2460      496E7075 
 2460      7473506C 
 2461              	.LASF11:
 2462 013d 75696E74 		.ascii	"uint32\000"
 2462      333200
 2463              	.LASF38:
 2464 0144 6D61736B 		.ascii	"mask\000"
 2464      00
 2465              	.LASF33:
 2466 0149 7265744D 		.ascii	"retMode\000"
 2466      6F646500 
 2467              	.LASF8:
 2468 0151 756E7369 		.ascii	"unsigned int\000"
 2468      676E6564 
 2468      20696E74 
 2468      00
 2469              	.LASF53:
 2470 015e 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_uVolts\000"
 2470      5341525F 
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 61


 2470      5345515F 
 2470      436F756E 
 2470      7473546F 
 2471              	.LASF54:
 2472 017a 75566F6C 		.ascii	"uVolts\000"
 2472      747300
 2473              	.LASF5:
 2474 0181 6C6F6E67 		.ascii	"long unsigned int\000"
 2474      20756E73 
 2474      69676E65 
 2474      6420696E 
 2474      7400
 2475              	.LASF56:
 2476 0193 766F6C74 		.ascii	"volts\000"
 2476      7300
 2477              	.LASF22:
 2478 0199 746D7052 		.ascii	"tmpRegVal\000"
 2478      65675661 
 2478      6C00
 2479              	.LASF3:
 2480 01a3 73686F72 		.ascii	"short unsigned int\000"
 2480      7420756E 
 2480      7369676E 
 2480      65642069 
 2480      6E7400
 2481              	.LASF50:
 2482 01b6 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_mVolts\000"
 2482      5341525F 
 2482      5345515F 
 2482      436F756E 
 2482      7473546F 
 2483              	.LASF63:
 2484 01d2 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\Repos\\PSOC4Pioneer\\DieT"
 2484      635C486F 
 2484      6D655C44 
 2484      6F63756D 
 2484      656E7473 
 2485 01fe 656D7041 		.ascii	"empADC\\ADC_SAR_Seq_DieTemp_PSoC401.cydsn\000"
 2485      44435C41 
 2485      44435F53 
 2485      41525F53 
 2485      65715F44 
 2486              	.LASF19:
 2487 0227 72656733 		.ascii	"reg32\000"
 2487      3200
 2488              	.LASF14:
 2489 022d 666C6F61 		.ascii	"float32\000"
 2489      74333200 
 2490              	.LASF20:
 2491 0235 73697A65 		.ascii	"sizetype\000"
 2491      74797065 
 2491      00
 2492              	.LASF41:
 2493 023e 6C6F774C 		.ascii	"lowLimit\000"
 2493      696D6974 
 2493      00
 2494              	.LASF45:
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 62


 2495 0247 4144435F 		.ascii	"ADC_SAR_SEQ_SetSatMask\000"
 2495      5341525F 
 2495      5345515F 
 2495      53657453 
 2495      61744D61 
 2496              	.LASF17:
 2497 025e 696E7436 		.ascii	"int64\000"
 2497      3400
 2498              	.LASF27:
 2499 0264 4144435F 		.ascii	"ADC_SAR_SEQ_Stop\000"
 2499      5341525F 
 2499      5345515F 
 2499      53746F70 
 2499      00
 2500              	.LASF26:
 2501 0275 4144435F 		.ascii	"ADC_SAR_SEQ_Enable\000"
 2501      5341525F 
 2501      5345515F 
 2501      456E6162 
 2501      6C6500
 2502              	.LASF15:
 2503 0288 666C6F61 		.ascii	"float\000"
 2503      7400
 2504              	.LASF43:
 2505 028e 68696768 		.ascii	"highLimit\000"
 2505      4C696D69 
 2505      7400
 2506              	.LASF44:
 2507 0298 4144435F 		.ascii	"ADC_SAR_SEQ_SetLimitMask\000"
 2507      5341525F 
 2507      5345515F 
 2507      5365744C 
 2507      696D6974 
 2508              	.LASF1:
 2509 02b1 756E7369 		.ascii	"unsigned char\000"
 2509      676E6564 
 2509      20636861 
 2509      7200
 2510              	.LASF39:
 2511 02bf 4144435F 		.ascii	"ADC_SAR_SEQ_EnableInjection\000"
 2511      5341525F 
 2511      5345515F 
 2511      456E6162 
 2511      6C65496E 
 2512              	.LASF2:
 2513 02db 73686F72 		.ascii	"short int\000"
 2513      7420696E 
 2513      7400
 2514              	.LASF31:
 2515 02e5 4144435F 		.ascii	"ADC_SAR_SEQ_IsEndConversion\000"
 2515      5341525F 
 2515      5345515F 
 2515      4973456E 
 2515      64436F6E 
 2516              	.LASF52:
 2517 0301 6D566F6C 		.ascii	"mVolts\000"
 2517      747300
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 63


 2518              	.LASF60:
 2519 0308 4144435F 		.ascii	"ADC_SAR_SEQ_countsPer10Volt\000"
 2519      5341525F 
 2519      5345515F 
 2519      636F756E 
 2519      74735065 
 2520              	.LASF28:
 2521 0324 4144435F 		.ascii	"ADC_SAR_SEQ_StartConvert\000"
 2521      5341525F 
 2521      5345515F 
 2521      53746172 
 2521      74436F6E 
 2522              	.LASF21:
 2523 033d 63684E75 		.ascii	"chNum\000"
 2523      6D00
 2524              	.LASF57:
 2525 0343 4144435F 		.ascii	"ADC_SAR_SEQ_channelsConfig\000"
 2525      5341525F 
 2525      5345515F 
 2525      6368616E 
 2525      6E656C73 
 2526              	.LASF58:
 2527 035e 4144435F 		.ascii	"ADC_SAR_SEQ_initVar\000"
 2527      5341525F 
 2527      5345515F 
 2527      696E6974 
 2527      56617200 
 2528              	.LASF34:
 2529 0372 6368616E 		.ascii	"chan\000"
 2529      00
 2530              	.LASF18:
 2531 0377 63686172 		.ascii	"char\000"
 2531      00
 2532              	.LASF32:
 2533 037c 4144435F 		.ascii	"ADC_SAR_SEQ_GetResult16\000"
 2533      5341525F 
 2533      5345515F 
 2533      47657452 
 2533      6573756C 
 2534              	.LASF47:
 2535 0394 6F666673 		.ascii	"offset\000"
 2535      657400
 2536              	.LASF42:
 2537 039b 4144435F 		.ascii	"ADC_SAR_SEQ_SetHighLimit\000"
 2537      5341525F 
 2537      5345515F 
 2537      53657448 
 2537      6967684C 
 2538              	.LASF51:
 2539 03b4 61646343 		.ascii	"adcCounts\000"
 2539      6F756E74 
 2539      7300
 2540              	.LASF30:
 2541 03be 73746174 		.ascii	"status\000"
 2541      757300
 2542              	.LASF12:
 2543 03c5 696E7431 		.ascii	"int16\000"
ARM GAS  C:\Users\ELISHA~1\AppData\Local\Temp\ccfKyBJP.s 			page 64


 2543      3600
 2544              	.LASF61:
 2545 03cb 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2545      4320342E 
 2545      392E3320 
 2545      32303135 
 2545      30333033 
 2546 03fe 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2546      20726576 
 2546      6973696F 
 2546      6E203232 
 2546      31323230 
 2547 0431 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2547      66756E63 
 2547      74696F6E 
 2547      2D736563 
 2547      74696F6E 
 2548              	.LASF36:
 2549 0459 4144435F 		.ascii	"ADC_SAR_SEQ_Init\000"
 2549      5341525F 
 2549      5345515F 
 2549      496E6974 
 2549      00
 2550              	.LASF35:
 2551 046a 72657375 		.ascii	"result\000"
 2551      6C7400
 2552              	.LASF55:
 2553 0471 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_Volts\000"
 2553      5341525F 
 2553      5345515F 
 2553      436F756E 
 2553      7473546F 
 2554              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
